
define(['require','config','core/VLibMediator','pluginLoader','jquery'],function(require,Config,VMediator,bootstrapPlugins,$) {
	/**
		Base class of the framework.<br />
		On the one hand vLib is an interface to the "outside world".
		On the other it provides information to modules.<br />
		VLib registers it self as pseudo module and acts as a service provider.<br/>
		It holds an instance of VMediator.<br />
		@class VLib
		@uses VMediator
		@module VLib
		@constructor
		@example
			var VLib = require('vlib');
			var v = new VLib();

	 	@return {Object}
	 		Facade gaining access to public properties and methods.
	 **/
	 var VLib = (function( config) {
	 	var config = config || {basePath:'',appPath:'', dataPath:''};
	 	this.name	= 'vLib';
	 	Config.basePath = config.basePath;
	 	Config.appPath = config.appPath;
	 	Config.dataPath = config.dataPath;

	 	var version = '2.2';
	 	/**
			List of registered instantiated plugins
			@private
			@property plugins
			@type {Array}
		**/
	 	var plugins = {};
	 	/**
			 List of registered plugins
			 @private
			 @property pluginsBluePrint
			@type {Array}
		**/
	 	var pluginsBluePrint = {};
	 	/**
			 List of registered templates. <br />
			 Templates are tree-objects generated by the scenegraph.
			 @private
			 @property templates
			@type {Array}
		**/
	 	var templates = [];
	 	/**
			Callback function <br />
			@private
			@method saveTemplateCallback
			@type {Method}
		**/
	 	var saveTemplateCallback = undefined;
		/**
		 Callback function <br />
		 @private
		 @method updateTemplateCallback
		 @type {Method}
		 **/
		var updateTemplateCallback = undefined;
	 	/**
			Callback function <br />
			@private
			@method deleteTemplateCallback
			@type {Method}
		**/
	 	var deleteTemplateCallback = undefined;
		/**
		 Callback function <br />
		 @private
		 @method loadTemplateCallback
		 @type {Method}
		 **/
		var loadTemplateCallback = undefined;
		/**
		 Callback function <br />
		 @private
		 @method loadFileCallback
		 @type {Method}
		 **/
		var loadFileCallback = undefined;
	 	/**
			Callback function <br />
			@private
			@method deleteTemplateCallback
			@type {Method}
		**/
	 	var uploadDataCallback = undefined;
	 	/**
			Callback function <br />
			@private
			@method deleteDataCallback
			@type {Method}
		**/
	 	var deleteDataCallback = undefined;
	 	/**
			Callback function <br />
			@private
			@method fileUploadUrl
			@type {Method}
		**/
	 	var fileUploadUrl = undefined;
		/**
			 List of registered file objects. <br />
			 Each object includes file.name, file.id, file.path and file.description
			 @private
			 @property files
			@type {Array}
		**/
	 	var files = [];

		// Guard to ensure that the callee has invoked our Class constructor
		// function
		// with 'new' keyword
		if (!this instanceof VLib) {
			throw new Error("Invalid usage! Instantiate VLib e.g.: var v = new VLib(); ");
		}

		/*
		 * AMDs
		 */
		//var VMediator = require('core/VLibMediator');
		var mediator = new VMediator();

		/** *************************************** */
		/*
		 * REQUEST HANDLER
		 */
		 /** *************************************** */
		 var requestPluginsHandle = function(obj){
			// respond requested plugin
			//console.log('[ VLib ][ requesthandle ] respond plugins to '+obj.src);
			var clones = {};
			$.each(plugins,function(index,o){
				if(typeof o.deepCopy === 'function'){
					clones[o.name] = plugins[o.name].deepCopy();
					//clones[o.name] = new pluginsBluePrint[o.name]();
				}else{
					clones[o.name] = new pluginsBluePrint[o.name]();
				}

			});
			var data = {
				target 	: 	obj.src,
				plugins	:	clones,
				bluePrint : 	pluginsBluePrint
			};

			this.publish( Config.CHANNEL_RESPOND_PLUGINS, data );
		};

		var requestTemplatesHandle = function(){
			// broadcast templates
			this.publish(Config.CHANNEL_RESPOND_TEMPLATES,templates);
		};
		var requestFilesHandle = function(){
			// broadcast files
			this.publish(Config.CHANNEL_RESPOND_FILES,files);
		};
		var injectScriptTemplateHandle = function(obj){

			$.ajax({
				url : Config.basePath+Config.appPath+"/"+obj.url,
				dataType : 'text',
				async : false
			}).done(function(templates) {
				$('head').append(templates);
			});
		};
		var requestLoadFileHandle = function(){
			if(!loadFileCallback){
				console.warn('[ vLib ] loadFileCallback not set!');
			}
			this.publish(Config.CHANNEL_RESPOND_LOADFILECALLBACK,loadFileCallback);
		};
		var requestLoadTemplateHandle = function(){
			if(!loadTemplateCallback){
				console.warn('[ vLib ] loadTemplateCallback not set!');
			}
			this.publish(Config.CHANNEL_RESPOND_LOADTEMPLATECALLBACK,loadTemplateCallback);
		};
		var requestSaveTemplateHandle = function(){
			this.publish(Config.CHANNEL_RESPOND_SAVETEMPLATECALLBACK,saveTemplateCallback);
		};
		var requestUpdateTemplateHandle = function(){
			this.publish(Config.CHANNEL_RESPOND_UPDATETEMPLATECALLBACK,updateTemplateCallback);
		};
		var requestDeleteTemplateHandle = function(){
			this.publish(Config.CHANNEL_RESPOND_DELETETEMPLATECALLBACK,deleteTemplateCallback);
		};
		var requestUploadDataHandle = function(){
			this.publish(Config.CHANNEL_RESPOND_UPLOADDATACALLBACK,uploadDataCallback);
		};
		var requestDeleteDataHandle = function(){
			this.publish(Config.CHANNEL_RESPOND_DELETEDATACALLBACK,deleteDataCallback);
		};
		var requestFileUploadUrlHandle = function(){
			this.publish(Config.CHANNEL_RESPOND_FILEUPLOADURL,fileUploadUrl);
		};

		/** *************************************** */
		// Add core as pseudo module
		mediator.registerModule(this);
		/** *************************************** */
		// Register request listener
		/**
			SUBSCRIPTION<br />
			Publishes registered plugins on
			<b>Config.CHANNEL_RESPOND_PLUGINS</b>. <br />
			The given example illustrates how to handle this response.
			@event Config.CHANNEL_REQUEST_PLUGINS
			@bubbles Config.CHANNEL_RESPOND_PLUGINS
			@broadcast Config.CHANNEL_RESPOND_PLUGINS
			@example
				module.subscribe(Config.CHANNEL_RESPOND_PLUGINS,respondPluginsHandle);
				var respondPluginsHandle = function(obj){
					console.log(JSON.stringify(obj));
				}
		*/
		this.subscribe(Config.CHANNEL_REQUEST_PLUGINS,requestPluginsHandle);
		/**
			SUBSCRIPTION<br />
			Publishes registered templates on
			<b>Config.CHANNEL_RESPOND_TEMPLATES</b>. <br />
			The given example illustrates how to handle this response.
			@event Config.CHANNEL_REQUEST_TEMPLATES
			@bubbles Config.CHANNEL_RESPOND_TEMPLATES
			@broadcast Config.CHANNEL_RESPOND_TEMPLATES
			@example
				module.subscribe(Config.CHANNEL_RESPOND_TEMPLATES,respondTemplatesHandle);
				var respondTemplatesHandle = function(obj){
					console.log(JSON.stringify(obj));
				}
		*/
		this.subscribe(Config.CHANNEL_REQUEST_TEMPLATES,requestTemplatesHandle);
		/**
			SUBSCRIPTION<br />
			Publishes requested callback function on
			<b>Config.CHANNEL_RESPOND_SAVETEMPLATECALLBACK</b>. <br />

			@event Config.CHANNEL_REQUEST_SAVETEMPLATECALLBACK
			@bubbles Config.CHANNEL_RESPOND_SAVETEMPLATECALLBACK
			@broadcast Config.CHANNEL_RESPOND_SAVETEMPLATECALLBACK
		*/
		this.subscribe(Config.CHANNEL_REQUEST_SAVETEMPLATECALLBACK,requestSaveTemplateHandle);
		/**
		 SUBSCRIPTION<br />
		 Publishes requested callback function on
		 <b>Config.CHANNEL_RESPOND_UPDATETEMPLATECALLBACK</b>. <br />

		 @event Config.CHANNEL_REQUEST_UPDATETEMPLATECALLBACK
		 @bubbles Config.CHANNEL_RESPOND_UPDATETEMPLATECALLBACK
		 @broadcast Config.CHANNEL_RESPOND_UPDATETEMPLATECALLBACK
		 */
		this.subscribe(Config.CHANNEL_REQUEST_UPDATETEMPLATECALLBACK,requestUpdateTemplateHandle);
		/**
			SUBSCRIPTION<br />
			Publishes requested callback function on
			<b>Config.CHANNEL_RESPOND_DELETETEMPLATECALLBACK</b>. <br />

			@event Config.CHANNEL_REQUEST_DELETETEMPLATECALLBACK
			@bubbles Config.CHANNEL_RESPOND_DELETETEMPLATECALLBACK
			@broadcast Config.CHANNEL_RESPOND_DELETETEMPLATECALLBACK
		*/
		this.subscribe(Config.CHANNEL_REQUEST_DELETETEMPLATECALLBACK,requestDeleteTemplateHandle);
		/**
		 SUBSCRIPTION<br />
		 Publishes requested callback function on
		 <b>Config.CHANNEL_RESPOND_LOADTEMPLATECALLBACK</b>. <br />

		 @event Config.CHANNEL_REQUEST_LOADTEMPLATECALLBACK
		 @bubbles Config.CHANNEL_RESPOND_LOADTEMPLATECALLBACK
		 @broadcast Config.CHANNEL_RESPOND_LOADTEMPLATECALLBACK
		 */
		this.subscribe(Config.CHANNEL_REQUEST_LOADTEMPLATECALLBACK,requestLoadTemplateHandle);
		/**
		 SUBSCRIPTION<br />
		 Publishes requested callback function on
		 <b>Config.CHANNEL_RESPOND_LOADFILECALLBACK</b>. <br />

		@event Config.CHANNEL_REQUEST_LOADFILECALLBACK
		 @bubbles Config.CHANNEL_RESPOND_LOADFILECALLBACK
		 @broadcast Config.CHANNEL_RESPOND_LOADFILECALLBACK
		*/
		this.subscribe(Config.CHANNEL_REQUEST_LOADFILECALLBACK,requestLoadFileHandle);

		/**
			SUBSCRIPTION<br />
			Publishes requested callback function on
			<b>Config.CHANNEL_RESPOND_UPLOADDATACALLBACK</b>. <br />

			@event Config.CHANNEL_REQUEST_UPLOADDATACALLBACK
			@bubbles Config.CHANNEL_RESPOND_UPLOADDATACALLBACK
			@broadcast Config.CHANNEL_RESPOND_UPLOADDATACALLBACK
		*/
		this.subscribe(Config.CHANNEL_REQUEST_UPLOADDATACALLBACK,requestUploadDataHandle);
		/**
			SUBSCRIPTION<br />
			Publishes requested callback function on
			<b>Config.CHANNEL_RESPOND_DELETEDATACALLBACK</b>. <br />

			@event Config.CHANNEL_REQUEST_DELETEDATACALLBACK
			@bubbles Config.CHANNEL_RESPOND_DELETEDATACALLBACK
			@broadcast Config.CHANNEL_RESPOND_DELETEDATACALLBACK
		*/
		this.subscribe(Config.CHANNEL_REQUEST_DELETEDATACALLBACK,requestDeleteDataHandle);
		/**
			SUBSCRIPTION<br />
			Publishes requested file upload url on
			<b>Config.CHANNEL_RESPOND_FILEUPLOADURL</b>. <br />

			@event Config.CHANNEL_REQUEST_FILEUPLOADURL
			@bubbles Config.CHANNEL_RESPOND_FILEUPLOADURL
			@broadcast Config.CHANNEL_RESPOND_FILEUPLOADURL
		*/
		this.subscribe(Config.CHANNEL_REQUEST_FILEUPLOADURL,requestFileUploadUrlHandle);
		/**
			SUBSCRIPTION<br />
			Publishes registered file on
			<b>Config.CHANNEL_RESPOND_FILES</b>. <br />
			The given example illustrates how to handle this response.
			@event Config.CHANNEL_RESQUEST_FILES
			@bubbles Config.CHANNEL_RESPOND_FILES
			@broadcast Config.CHANNEL_RESPOND_FILES
			@example
				module.subscribe(Config.CHANNEL_RESPOND_FILES,responseHandle);
				var responseHandle = function(obj){
					console.log(JSON.stringify(obj));
				}
		*/
		this.subscribe(Config.CHANNEL_RESQUEST_FILES,requestFilesHandle);
		/**
			SUBSCRIPTION<br />
			VLib fetches a JS-HTML template from the given url asynchronously.
			@event Config.CHANNEL_INJECT_SCRIPTTEMPLATE
			@example
				module.publish(
						Config.CHANNEL_INJECT_SCRIPTTEMPLATE, {
							url: PATH_TO_HTML_SCRIPT_TEMPLATE
						});
		*/
		this.subscribe(Config.CHANNEL_INJECT_SCRIPTTEMPLATE,injectScriptTemplateHandle);


		/**************************************** */
		/* PRIVATE METHODS  			*/
		/** *************************************** */
		var registerPlugin = function(obj){
			var tmp = new obj();
			if(plugins.hasOwnProperty(tmp.name) ){
				console.log('[ VLib ][ registerPlugin ][ WARNING ] Plugin[ '+tmp.name+' ] already registered!');
			}

			pluginsBluePrint[tmp.name] = obj;
			plugins[tmp.name] = tmp;
		};
		var emptyTemplateList = function(){
			templates = [];
		};
		var registerTemplate = function(obj){
			templates.push(obj);
			//notify modules
			mediator.publish(Config.CHANNEL_RESPOND_TEMPLATES,templates);
		};
		var getPlugins = function(){
			return _.clone(plugins);
		};
		var setTemplate = function( obj, plotInstance ){

			//mediator.publish(Config.CHANNEL_TEMPLATES_TEMPLATE_SELECTED,{template:obj});
			if(plotInstance === undefined){
				mediator.publish(Config.CHANNEL_RENDER_TEMPLATE,{template:obj});
			}else{
				if(plotInstance.hasOwnProperty('container')){
					mediator.publish(Config.CHANNEL_RENDER_TEMPLATE,{
						template:obj,
						target: plotInstance.container
					});
				}else{
					/* handle as id*/
					mediator.publish(Config.CHANNEL_RENDER_TEMPLATE,{
						template:obj,
						target: $('#'+plotInstance.container)
					});
				}

			}

		};
		var emptyFileList = function(){
			files = [];
		};
		var setFile = function(obj){
			if(obj === undefined){
				//THROW ERROR
				console.log('[ VLib ][ registerFile ][ ERROR ] No file given.');
				return;
			}
			if(obj.path === undefined){
				//THROW ERROR
				console.log('[ VLib ][ registerFile ][ ERROR ] No path given. {path:"PATH_TO_YOUR_FILE"}');
				return;
			}

			files.push(obj);
		};
		var setSaveTemplateCallback = function(callback){
			saveTemplateCallback = callback;
		};
		var setDeleteTemplateCallback = function(callback){
			deleteTemplateCallback = callback;
		};
		var setUpdateTemplateCallback = function(callback){
			updateTemplateCallback = callback;
		};
		var setLoadTemplateCallback = function(callback){
			loadTemplateCallback = callback;
		};
		var setLoadFileCallback = function(callback){
			loadFileCallback = callback;
		};
		var setUploadDataCallback = function(callback){
			uploadDataCallback = callback;
		};
		var setDeleteDataCallback = function(callback){
			deleteDataCallback = callback;
		};
		var setFileUploadURL = function(url){
			fileUploadUrl = url;
		};


		// ************************************************************************
		// REGISTER PLUGINS
		// ************************************************************************
		bootstrapPlugins.apply(this,[ registerPlugin ]);

		/* FACADE */
		 return {
		 	/**
		 	Project revision
		 	@public
		 	@property version
			@type {String}
			**/
		 	version						:	version,
		 	/* MEDIATOR */
		 	/**
		 		Returns a list of registerd channels
		 		@public
		 		@method getChannels
				@retrun {Array} channel list
		 	 **/
		 	getChannels					:	mediator.getChannels(),
		 	/**
		 		Facade to mediator.registerModule
		 		@public
		 		@method registerModule
		 	 **/
		 	registerModule					:	mediator.registerModule,
		 	/**
		 		@public
		 		@method publish
		 	 **/
		 	publish 					: 	mediator.publish,
		 	/* PLUGINS */
		 	/**
		 		@public
		 		@method registerPlugin
		 	 **/
		 	registerPlugin					:	registerPlugin,
		 	/**
		 		@public
		 		@method getPlugins
		 	 **/
		 	getPlugins					:	getPlugins(),
		 	/* TEMPLATES */
		 	/**
		 		@public
		 		@method emptyTemplateList
		 	 **/
		 	emptyTemplateList 				: 	emptyTemplateList,
		 	/**
		 		@public
		 		@method registerTemplate
		 	 **/
		 	registerTemplate				:	registerTemplate,
		 	/**
		 		@public
		 		@method setSaveTemplateCallback
		 	 **/
		 	setSaveTemplateCallback			: 	setSaveTemplateCallback,
			 /**
			  @public
			  @method setUpdateTemplateCallback
			  **/
			 setUpdateTemplateCallback			: 	setUpdateTemplateCallback,
		 	/**
		 		@public
		 		@method setDeleteTemplateCallback
		 	 **/
		 	setDeleteTemplateCallback			: 	setDeleteTemplateCallback,
			 /**
			  @public
			  @method setLoadTemplateCallback
			  **/
			 setLoadTemplateCallback			: 	setLoadTemplateCallback,
			 /**
			  @public
			  @method setLoadFileCallback
			  **/
			 setLoadFileCallback			: 	setLoadFileCallback,
		 	/*VISUALIZE TEMPLATE*/
		 	/**
		 		@public
		 		@method load
		 	 **/
		 	load						:	setTemplate,
		 	/*DATA FILES*/
		 	/**
		 		@public
		 		@method emptyFileList
		 	 **/
		 	emptyFileList 					 : 	emptyFileList,
		 	/**
		 		@public
		 		@method registerFile
		 	 **/
		 	registerFile					:	setFile,
		 	/**
		 		@public
		 		@method setUploadDataCallback
		 	 **/
		 	setUploadDataCallback         			: 	setUploadDataCallback,
		 	/**
		 		@public
		 		@method setDeleteDataCallback
		 	 **/
		 	setDeleteDataCallback				: 	setDeleteDataCallback,
		 	/**
		 		@public
		 		@method setFileUploadURL
		 	 **/
		 	setFileUploadURL		 		: 	setFileUploadURL

		 }

		});

return VLib;

});
