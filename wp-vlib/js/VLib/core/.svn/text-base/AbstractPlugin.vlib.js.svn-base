define(['require','config','core/utils.vlib'],function(require,Config,UTILS) {
	/**
	TODO<br />
	Abstract Class used by plugins.
	@class AbstractPlugin
	@constructor
	@example
		var NewPlugin = function(){
			var name = 'UNIQUE_NAME';
			NewPlugin.superClass.constuctor.call(this,name);
			Plugin.superClass.setContext.call(this,Config.PLUGINTYPE.CONTEXT_3D);
			Plugin.superClass.setType.call(this,Config.PLUGINTYPE.PLOT);
			//...
		}
		UTILS.CLASS.extend(NewPlugin,AbstractPlugin);
		//Override abstract methods
		NewPlugin.prototype = {
			exec : function(config,childs){
				//TODO
			}
			//...
		};
	@abstract
	 **/
	var AbstractPlugin = function(name){
		/** ********************************** */
		/** PUBLIC VARIABLES * */
		/** ********************************** */
		/**
		Unique plugin ID.
		@property id
		@type String
		@uses UTILS.getUUID()
		@readOnly
		**/
		this.id = UTILS.getUUID();
		/**
		Unique plugin name.
		@property name
		@type String
		@uses UTILS.getUUID()
		@writeOnce
		**/
		this.name = name;
		/**
		Plugin context according to Config.PLUGINTYPE.(CONTEXT_2D | CONTEXT_3D)
		@property context
		@type {Config.PLUGINTYPE.(CONTEXT_2D | CONTEXT_3D)}
		@writeOnce
		**/
		this.context = undefined;
		/** plugin type according to Config.PLUGINTYPE  **/
		this.type = undefined;

		/**
		Path to plugin-template file
		@property templates
		@type String
		@default undefined
		**/
		this.templates = undefined;
		/**
		path to plugin-icon.<br />
		Config.absPlugins + PLUGINFOLDER + FILENAME
		@property icon
		@type String
		@default undefined
		**/
		this.icon = Config.absPlugins + '/default_plugin_icon.png';
		/**
		Lists of accepted childs and parents.
		@property accepts
		@type {Object}
		@default {
			predecessors : [  ],
			successors : [  ]}
		**/
		this.accepts = {
			predecessors : [  ],
			successors : [  ]
		}
		/** Informations about PARENT and CHILD plugins **/
		this.description = 'Requires: [ '+this.accepts.predecessors.join(', ')+' ] Accepts: [ '+this.accepts.successors.join(', ')+' ]';
	};

	AbstractPlugin.prototype = {
		/** ********************************** */
		/** PUBLIC METHODS * */
		/** ********************************** */
		/**
		Use this method If and only if a new plugin gets instantiated with data from a plugin-flyweight.<br />
		Plugin id will be set automatically. This method is supposed for flyweight <-> plugin synchronization.
		@method setId
		@public
		@param id {UUID}
			Config.PLUGINTYPE.(CONTEXT_2D | CONTEXT_3D)
		  **/
		setId : function(id){
			this.id = id;
		},
		/**
		@method setContext
		@public
		@param context {String}
			Config.PLUGINTYPE.(CONTEXT_2D | CONTEXT_3D)
		  **/
		setContext : function(context){
			this.context = context;
		},
		/**
		@method setType
		@public
		@param type {String}
			Config.PLUGINTYPE.XXX
		  **/
		setType : function(type){
			this.type = type;
		},
		/**
		@method setTemplates
		@public
		@param templates {String}
			Path to html-script-template file.
		  **/
		setTemplates : function(templates){
			this.templates = templates;
		},
		/**
		@method setIcon
		@public
		@param type {icon}
			Path to icon.
		  **/
		setIcon : function(icon){
			this.icon = icon;
		},
		/**
		Lists of accepted childs and parents.
		@method setAccepts
		@public
		@param accepts {Object} {
			predecessors : [  ],
			successors : [  ]
			}
		**/
		setAccepts : function(accepts){
			this.accepts = accepts;
		},
		/**
		@method setDescription
		@public
		@param description {icon}
			Description.
		  **/
		setDescription : function(description){
			this.description = description;
		},
		/** ********************************** */
		/** ABSTRACT METHODS * */
		/** ********************************** */
		/**
		Takes configuration from the plugin-template and
		returns the parameters as JSON-config-file<br />
		THIS IS AN ABSTRACT METHOD AND HAS TO BE OVERWRITTEN.
		@method getConfigCallback
		@abstract
		@param containerId {String}
			Parent container which encloses the
			plugin - config - form ( defined by @property templates)
		 @return {Object}
		  	Plugin config file
		  **/
		getConfigCallback : function(containerId) {
			throw new Error('Unsupported operation on an abstract method.');
		},
		/**
		 *
		 *
		 *
		 * @param config
		 *            plugin config file
		 * @param containerId
		 *            parent container where the plugin-template got
		 *            added
		 */
		 /**
		Takes arguments from config and inserts them to the
		plugin-template<br />
		THIS IS AN ABSTRACT METHOD AND HAS TO BE OVERWRITTEN.
		 @method setConfigCallback
		 @abstract
		 @param config {Object}
		 	Plugin configuration object

		 @param containerId {String}
			Parent container which encloses the
			plugin - config - form ( defined by @property templates)

		 @return {Object}
		 	Plugin config file
		 **/
		 setConfigCallback : function(config, containerId) {
			throw new Error('Unsupported operation on an abstract method.');
		},
		/**
		Where the magic happens...<br />
		Called by parser<br />
		THIS IS AN ABSTRACT METHOD AND HAS TO BE OVERWRITTEN.
		 @method exec
		 @abstract
		 @param config {Object}
		 	Plugin configuration object

		 @param childs {Array}
			Array of child plugins.<br />
			to be more precise: The results of childs-exec() methods.

		 @return {Object}

		 **/
		exec :  function(config,childs,buffer) {
			throw new Error('Unsupported operation on an abstract method.');
		}

	}



	return AbstractPlugin;

});
