define(
	[ 'require', 'config', 'jquery', 'underscore','libs/canvas2image','libs/base64','libs/rgbcolors','libs/StackBlur','libs/canvg' ],
	function(require, Config, $, _) {
		'use strict';
			/**
			TODO<br />
			@module Plot
			@class Plot
			**/
			var module = function() {
				this.name = 'plot';
				this.plugins = null;
				this.pluginBLuePrints = undefined;
				this.container = 'body';

				var buffer = {};
				var width;
				var height;
				var baseId;
				var renderId;
				// this.baseContainer;
				// this.plotContainer;
				// this.controlsContainer;
				// this.messageContainer;

				// var fullscreenState = false;
				var renderResult;
				var runningPlugin;
				var animationId;
				var isRendering = false;
				var lastRenderedObj;
				var _templates = Config.absModules + '/plot/templates.js';

				this.isRegisterd = function() {
					return (typeof this.subscribe === 'function') && (typeof this.publish === 'function');

				};
				this.init = function(container) {

					this.container = $(container);
					console.log('********************plot init container '+this.container.attr('id'));

					if (this.isRegisterd()) {
						/** *************************************** */
						/* REQUEST TEMPLATE INJECTION */
						/** *************************************** */
						this.publish(Config.CHANNEL_INJECT_SCRIPTTEMPLATE, {
							url: _templates
						});
						/** *************************************** */
						/* CALL FUNCTIONS HERER */
						/** *************************************** */
						this.addGui();
						this.addListener();


						// get plugins from core
						console.log('[ plot ][ requesting plugins ]');
						this.publish(Config.CHANNEL_REQUEST_PLUGINS, {
							src : this.container
						});

						/** *************************************** */
					} else {
						this.publish(Config.CHANNEL_ERROR,'Module[ plot ] not registered! Use VLib.registerModule(obj) first.');
						throw 'Module [ '+ this.name+ ' ] not registered! Use VLib.registerModule(obj) first.';
					}

				};

				this.addGui = function() {
					this.container.html('');
					/** add controler template * */
					_.templateSettings.variable = 'rc';
					var template = _.template($('script.plotContainer').html());
					this.container.append(template());
					this.baseContainer = this.container.find('#vPlot-BaseContainer');
					this.plotContainer = this.container.find('#plotContainer');
					this.controlsContainer = this.container.find('#plotControls');
					this.messageContainer = this.container.find('#plotMessage');

					this.baseContainer.attr('id','vPlot-base-'+this.container.attr('id'));
					this.plotContainer.attr('id','vPlot-render-'+this.container.attr('id'));

					if(this.baseContainer.height() < 100){
						this.baseContainer.height(this.container.height());
					}

					if(this.baseContainer.height() < 100){
						this.baseContainer.height(500);
					}
					// height is zero
					if(this.baseContainer.height() < 100){
						this.publish(Config.CHANNEL_ERROR,'Module[ plot ] Container.height() is ZERO!');
					}

					if(this.baseContainer.width() < 100){
						this.baseContainer.width(this.container.width());
					}
					// height is zero
					if(this.baseContainer.width() < 100){
						this.baseContainer.height(this.container.height());
					}
					if(this.baseContainer.width() < 100){
						this.publish(Config.CHANNEL_ERROR,'Module[ plot ] Container.width() is ZERO!');
					}
					width = this.baseContainer.width();
					height = this.baseContainer.height();
					baseId = this.baseContainer.attr('id');
					renderId = this.plotContainer.attr('id');
					this.plotContainer.width(width);
					this.plotContainer.height(height);

				};

				this.showMsg = function(type,text){
					var msg = $('<div />');
					msg.attr('class','alert alert-dismissable '+type);
					msg.append('<button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>');
					msg.append(text);
					this.messageContainer.html(msg);

				};
				this.clearMsg = function(){
					this.messageContainer.html('');
				};

				/** *************************************** */
				/* LISTENERS */
				/** *************************************** */
				this.attachFocusListener = function(){
					this.container.mouseenter(function(){
						if(isRendering)$(this).find('#plotControls').fadeIn('slow');
					}).mouseleave(function(){
						$(this).find('#plotControls').fadeOut('slow');
					});
				};
				this.attachRefreshListener = function(){
					var that = this;
					this.controlsContainer.find('#plot-refresh').click(function(){
						that.refresh();
					});
				};

				this.attachSaveListener = function(){
					var that = this;
					this.controlsContainer.find('#plot-save').click(function(){

						try{
							//3d - canvas
							Canvas2Image.saveAsPNG(renderResult.domElement);
						}catch(e){
							if(e instanceof TypeError){
								//2d -svg to canvas to png
								that.plotContainer.append('<canvas id="plot-canvas"></canvas>');
								var canvas = document.createElement('canvas');
								//svg to canvas
								var svg = that.plotContainer.find('svg').prop('outerHTML').trim();

								canvg(canvas,svg);
								//canvas to png
								Canvas2Image.saveAsPNG(canvas);
							}
						}
						// var img_dataurl = renderResult.domElement.toDataURL('image/png');

						// var svg_img = document.createElementNS('http://www.w3.org/2000/svg', 'image');

						// svg_img.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', img_dataurl);
						// console.log(svg_img);
						//document.getElementById("svgPreview").appendChild(svg_img);

					});
				};
				var isOpen = false;
				this.attachFullscreenClickListener = function(){

					var target = document.getElementById(this.baseContainer.attr('id'));

					this.controlsContainer.find('#plot-fullscreen').click(function(){
						if(!isOpen){
							if(lastRenderedObj === undefined) return;

							if(target.requestFullscreen) {
								target.requestFullscreen();
							}else if(target.mozRequestFullScreen) {
								target.mozRequestFullScreen();
							} else if(target.webkitRequestFullscreen) {
								target.webkitRequestFullscreen();
							} else if(target.msRequestFullscreen) {
								target.msRequestFullscreen();
							}

						}else{
							if(document.exitFullscreen) {
								document.exitFullscreen();
							} else if(document.mozCancelFullScreen) {
								document.mozCancelFullScreen();
							} else if(document.webkitExitFullscreen) {
								document.webkitExitFullscreen();
							}
						}
					});
				};

				this.handleFullscreenState = function(fullscreen){

					if(fullscreen){
						this.resizeToFullscreen();
						isOpen = true;
					}else{
						this.resizeToNormal();
						isOpen = false;
					}
					this.refresh();
				};
				this.resizeToFullscreen = function(){

					document.getElementById(renderId).style.width =	$(window).width() + 'px';
					document.getElementById(renderId).style.height =	$(window).height() + 'px';
					document.getElementById(baseId).style.width =	$(window).width() + 'px';
					document.getElementById(baseId).style.height =	$(window).height() + 'px';

				};
				this.resizeToNormal = function(){

					document.getElementById(renderId).style.width = width+'px';
					document.getElementById(renderId).style.height = height+'px';
					document.getElementById(baseId).style.width = width+'px';
					document.getElementById(baseId).style.height = height+'px';

				};
				this.attachFullscreenListener = function(){
					var that = this;
					document.addEventListener('fullscreenchange', function () {
						that.handleFullscreenState(document.fullscreen);
					}, false);

					document.addEventListener('mozfullscreenchange', function () {
						that.handleFullscreenState(document.mozFullScreen);
					}, false);

					document.addEventListener('webkitfullscreenchange', function () {
						that.handleFullscreenState(document.webkitIsFullScreen);
					}, false);

					document.addEventListener('msfullscreenchange', function () {
						that.handleFullscreenState(document.msFullscreenElement);
					}, false);
				};
				this.addListener = function() {

					this.attachFullscreenListener();
					this.attachFullscreenClickListener();
					this.attachFocusListener();
					this.attachRefreshListener();

					this.attachSaveListener();
					/**
					SUBSCRIPTION
					@event Config.CHANNEL_RESPOND_PLUGINS
					*/
					this.subscribe(Config.CHANNEL_RESPOND_PLUGINS,
						this.respondPluginhandle);
					/**
					SUBSCRIPTION
					@event Config.CHANNEL_RENDER_TEMPLATE
					*/
					this.subscribe(Config.CHANNEL_RENDER_TEMPLATE, render);
					/**
					SUBSCRIPTION
					@event Config.CHANNEL_RESET
					*/
					this.subscribe(Config.CHANNEL_RESET, this.reset);
					/**
					SUBSCRIPTION
					@event Config.CHANNEL_REFRESH
					*/
					this.subscribe(Config.CHANNEL_REFRESH, this.refresh);

				};
				this.refresh = function(){
					if(lastRenderedObj === undefined) return;
					this.publish(Config.CHANNEL_RENDER_TEMPLATE, lastRenderedObj);
				};
				this.reset = function(){
					this.showMsg('alert-info','[ plot module ] waiting for update...');
					if(runningPlugin !== null && runningPlugin !== undefined){
						if(runningPlugin.stop === 'function')
							runningPlugin.stop();
						lastRenderedObj = undefined;
						this.plotContainer.html('');
					}


				};
				/* LISTENERS */
				var render = function(obj) {

					if(obj.target !== undefined && obj.target !== this.container){
						return;
					}
					if(obj.template === undefined || obj.template === false) {
						isRendering = false;
						this.showMsg('alert-info','[ plot module ] waiting for update...');
						this.plotContainer.html('');
						return;
					}

					if(obj.template.sceneGraph === undefined || obj.template.sceneGraph === false){
						isRendering = false;
						this.showMsg('alert-info','[ plot module ] invalid template!');
						return;
					}

					var root = obj.template.sceneGraph;
					if(root.config === '' || root.config === undefined){
						root.config = {};
					}
					if( root.config.scene === undefined){
						root.config.scene = {};
					}
					//root.config.container = this.plotContainer === undefined ? this.container : this.plotContainer;
					root.config.container = this.plotContainer.attr('id');

					if(root.config.scene.height === 0){
						this.publish(Config.CHANNEL_WARNING,'Scene height is 0! Height will be set to DEFAULT.');
						console.log('[ plot ] Warning: container.height is 0! Height will be set to DEFAULT_PLOT_HEIGHT= '+Config.DEFAULT_PLOT_HEIGHT);
						root.config.scene.height = Config.DEFAULT_PLOT_HEIGHT;
					}
					if(root.config.scene.width === 0){
						this.publish(Config.CHANNEL_WARNING,'Scene width is 0! Width will be set to DEFAULT.');
						console.log('[ plot ] Warning: container.width is 0! Width will be set to DEFAULT_PLOT_WIDTH= '+Config.DEFAULT_PLOT_WIDTH);
						root.config.scene.width = Config.DEFAULT_PLOT_WIDTH;
					}

					this.clearMsg();
					this.renderedPlugins = [];
					if(runningPlugin !== undefined && runningPlugin !== null){
						if(runningPlugin.stop === 'function'){
							runningPlugin.stop();
							runddingPlugin = null;
						}
					}
					lastRenderedObj = _.clone(obj);
					isRendering = true;

					// var p = {};
					// $.each(this.plugins,function(i,o){
					// 	if(o.type === Config.PLUGINTYPE.CONTEXT_3D){
					// 		p[o.name] = o;
					// 	}else if(typeof o.deepCopy === 'function'){
					// 		p[o.name] = o.deepCopy();
					// 	}else{
					// 		p[o.name] = jQuery.extend(true, {}, o);
					// 	}
					// });

					console.log('[ plot ][ repaint ][ '+this.container.attr('id')+' ]');


					var parsed = this.parse(root);


					runningPlugin = new this.pluginBLuePrints[root.name]();
					runningPlugin.setId(root.id);
					this.renderedPlugins.push(runningPlugin);
					renderResult = runningPlugin.exec(root.config,parsed,buffer);

					if(renderResult.animationId !== undefined){
						animationId = renderResult.animationId;
					}
					if(renderResult !== true) this.plotContainer.html(renderResult.domElement);
					this.container.find('#plotDescriptionContainer').html(obj.template.description);

					//this.plugins = p;

					this.publish(Config.CHANNEL_RENDERED_PLUGIN_LIST,this.renderedPlugins);
				};
				this.renderedPlugins = [];
				this.parse = function(treeElement) {

					var result = [];

					for ( var i = 0; i < treeElement.childs.length; ++i) {

						var tmp = this.parse(treeElement.childs[i]);
						var clone = new this.pluginBLuePrints[treeElement.childs[i].name]();
						console.log('parse ' + clone.name);
						clone.setId(treeElement.childs[i].id);
						this.renderedPlugins.push(clone);
						result.push(clone.exec(treeElement.childs[i].config, tmp, buffer));
					}
					return result;

				};
				this.respondPluginhandle = function(obj) {
					if (obj.target != this.container)
						return;
					this.plugins = obj.plugins;
					this.pluginBLuePrints = obj.bluePrint;
				};
			};

			return module;
		});
