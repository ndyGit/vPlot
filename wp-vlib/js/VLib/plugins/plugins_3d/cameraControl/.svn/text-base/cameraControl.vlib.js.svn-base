define([ 'require', 'config','core/AbstractPlugin.vlib','core/Utils.vlib', 'jquery', 'three','three_trackball_controls','three_orbit_controls' ],
 function(require, Config,AbstractPlugin,UTILS) {
	/**
			TODO<br />
			@class Plugin CameraControl
			@constructor
			@extends AbstractPlugin
			**/
			var Plugin = (function() {
				var name = 'cameraControl';
				Plugin.superClass.constuctor.call(this,name);
				Plugin.superClass.setContext.call(this,Config.PLUGINTYPE.CONTEXT_3D);
				Plugin.superClass.setType.call(this,Config.PLUGINTYPE.CAMERA);
				/** path to plugin-template file * */
				Plugin.superClass.setTemplates.call(this,Config.absPlugins+ '/plugins_3d/cameraControl/templates.js');
				Plugin.superClass.setIcon.call(this,Config.absPlugins+ '/plugins_3d/cameraControl/icon.png');
				Plugin.superClass.setAccepts.call(this,{
					predecessors : [ Config.PLUGINTYPE.CONTEXT_3D ],
					successors : []
				});
				Plugin.superClass.setDescription.call(this,'Requires: [ '+this.accepts.predecessors.join(', ')+' ] Accepts: [ '+this.accepts.successors.join(', ')+' ]');


				this.config = null;

		/**
		 * Takes arguments from config and inserts them to the
		 * plugin-template
		 *
		 * @param config
		 *            plugin config file
		 * @param containerId
		 *            parent container where the plugin-template got
		 *            added
		 */
		 this.setConfigCallback = function(config, containerId) {
		 	console.log("[ cameraControl ][setConfig] " + JSON.stringify(config));
		 	this.config = config;
		 	if(config === undefined || config == ""){
		 		config = {};
		 	}
		 	if(config.pos === undefined){
		 		config.pos = {x:0,y:0,z:0};
		 	}
		 	if(config.pos !== undefined){
		 		//Pivot point
		 		if(config.pos.x !== undefined){
		 			$('#' + containerId).find('#pos-x').val(config.pos.x);
		 		}else{
		 			$('#' + containerId).find('#pos-x').val(0);
		 		}
		 		if(config.pos.y !== undefined){
		 			$('#' + containerId).find('#pos-y').val(config.pos.y);
		 		}else{
		 			$('#' + containerId).find('#pos-y').val(0);
		 		}
		 		if(config.pos.z !== undefined){
		 			$('#' + containerId).find('#pos-z').val(config.pos.z);
		 		}else{
		 			$('#' + containerId).find('#pos-z').val(0);
		 		}

		 		//Type
		 		if (config.controlType != undefined) {
		 			$('#' + containerId + ' #controlType').val(
		 				config.controlType);
		 			$('#' + containerId + ' #controlTypeSelect').find('option[value="'+config.controlType+'"]').attr('selected', 'selected');
		 		}else{
		 			$('#' + containerId + ' #controlTypeSelect').find('option[value="trackball"]').attr('selected', 'selected');
		 			$('#' + containerId + ' #controlType').val('trackball');
		 		}

		 		if(config.rotateSpeed !== undefined){
		 			$('#' + containerId).find('#rotateSpeed').val(config.rotateSpeed);
		 		}else{
		 			$('#' + containerId).find('#rotateSpeed').val(1);
		 		}

		 		if(config.zoomSpeed !== undefined){
		 			$('#' + containerId).find('#zoomSpeed').val(config.zoomSpeed);
		 		}else{
		 			$('#' + containerId).find('#zoomSpeed').val(1);
		 		}
		 	}
		 	// controlType change handler
		 	$('#' + containerId ).find(' #controlTypeSelect').change(function(){
		 		var selected = $(this).find('option:selected');
		 		$('#' + containerId ).find(' #controlType').val(selected.val());
		 	});
		 }
		 this.getConfigCallback = function(containerId) {
		 	var x = $('#' + containerId).find('#pos-x').val();
		 	var y = $('#' + containerId).find('#pos-y').val();
		 	var z = $('#' + containerId).find('#pos-z').val();

		 	var controlType = $('#' + containerId).find('#controlType').val();
		 	if(controlType == '')
		 		controlType = 'trackingball';

		 	var rotateSpeed = $('#' + containerId).find('#rotateSpeed').val();
		 	var zoomSpeed = $('#' + containerId).find('#zoomSpeed').val();
		 	var result = {
		 		controlType : controlType,
		 		pos : {
		 			x : x === "" ? 0 : x,
		 			y : y === "" ? 0 : y,
		 			z : z === "" ? 0 : z
		 		},
		 		rotateSpeed : rotateSpeed,
		 		zoomSpeed : zoomSpeed
		 	};
		 	console.log("[ cameraControl ][getConfig] " + JSON.stringify(result));
		 	return result;
		 }
		/**
		 * config = object config.controlType = (trackball||orbit) default =
		 * trackball
		 *
		 * config.pos = object = camera position config.pos.x config.pos.y
		 * config.pos.z
		 */
		 this.exec = function(c, childs) {
		 	console.log("   EXEC cameraControler ");

		 	this.config = c;

		 	return {
		 		pType: this.type,
		 		response : {
		 			'callback' : this.cameraControlCallback,
		 			'callbackObj' : this
		 		}
		 	};

		 }
		 this.cameraControlCallback = function(camera, renderer, container) {

		 	var controls = null;
		 	if (this.config.hasOwnProperty('controlType')) {
		 		if ('orbit' === this.config.controlType) {
		 			controls = new THREE.OrbitAndPanControls(camera,
		 				renderer.domElement);
		 		} else {
		 			var c = $(container).get(0);
		 			controls = new THREE.TrackballControls(camera, c);
		 		}
		 	}else{
				// DEFAULT
				var c = $(container).get(0);

				controls = new THREE.TrackballControls(camera, c);
			}
			var posX, posY, posZ;
			if (this.config.pos === undefined) {
				posX = posY = posZ = 0;
			} else {
				posX = this.config.pos.x == undefined ? 0 : parseFloat(this.config.pos.x);
				posY = this.config.pos.y == undefined ? 0 : parseFloat(this.config.pos.y);
				posZ = this.config.pos.z == undefined ? 0 : parseFloat(this.config.pos.z);
			}
			var rotateSpeed = 1.2;
			if (this.config.rotateSpeed !== undefined) {
				rotateSpeed = this.config.rotateSpeed
			}
			var zoomSpeed = 1.2;
			if (this.config.zoomSpeed !== undefined) {
				zoomSpeed = this.config.zoomSpeed
			}
			controls.target.set(posX, posY, posZ);
			controls.rotateSpeed = rotateSpeed;
			controls.zoomSpeed = zoomSpeed;
			controls.panSpeed = 0.8;
			controls.noZoom = false;
			controls.noPan = false;
			controls.staticMoving = false;
			controls.dynamicDampingFactor = 1;
			controls.keys = [ 65, 83, 68 ];
			controls.lookVertical = true;
			controls.lookSpeed = 0.125;

			return controls;
		}

	});
UTILS.CLASS.extend(Plugin,AbstractPlugin);
return Plugin;

});
