define(['require','config','core/AbstractPlugin.vlib','core/Utils.vlib'],function(require,Config,AbstractPlugin,UTILS) {
	/**
			TODO<br />
			@class Plugin Color
			@constructor
			@extends AbstractPlugin
			**/
			var Plugin = (function() {
				var name = 'color';
				Plugin.superClass.constuctor.call(this,name);
				Plugin.superClass.setContext.call(this,Config.PLUGINTYPE.CONTEXT_3D);
				Plugin.superClass.setType.call(this,Config.PLUGINTYPE.COLOR);
				/** path to plugin-template file * */
				Plugin.superClass.setTemplates.call(this,Config.absPlugins+ '/plugins_3d/color/templates.js');
				Plugin.superClass.setIcon.call(this,Config.absPlugins+ '/plugins_3d/color/icon.png');
				Plugin.superClass.setAccepts.call(this,{
					predecessors : [ Config.PLUGINTYPE.DATA, Config.PLUGINTYPE.AXES ],
					successors : [  ]
				});
				Plugin.superClass.setDescription.call(this,'Requires: [ '+this.accepts.predecessors.join(', ')+' ] Accepts: [ '+this.accepts.successors.join(', ')+' ]');

				/** ********************************** */
				/** PUBLIC VARIABLES * */
				/** ********************************** */

				/** ********************************** */
				/** PUBLIC METHODS * */
				/** ********************************** */
		/**
		 * Takes inserted configuration from the plugin-template and
		 * returns the parameters as JSON-config-file
		 *
		 * @param containerId
		 *            parent container where the plugin-template got
		 *            added
		 *
		 * @return config file format:
		 *         { path:VALUE,data:VALUE}
		 */
		 this.getConfigCallback = function(containerId) {
		 	var color = $('#' + containerId + ' > form input[id=color]')
		 	.val();
		 	var result = {
		 		'color' : color
		 	};
		 	console.log("[ color ][getConfig] "+JSON.stringify(result));
		 	return result;
		 }
		/**
		 * Takes arguments from config and inserts them to the
		 * plugin-template
		 *
		 * @param config
		 *            plugin config file
		 * @param containerId
		 *            parent container where the plugin-template got
		 *            added
		 */
		 this.setConfigCallback = function(config, containerId) {
		 	console.log("cId:"+containerId+"[ color ][setConfig] "+JSON.stringify(config));
		 	if (config == "" || config === undefined)
		 		config = {};

		 	var hexFromRGB = function(r, g, b) {
		 		var hex = [
		 		r.toString( 16 ),
		 		g.toString( 16 ),
		 		b.toString( 16 )
		 		];
		 		$.each( hex, function( nr, val ) {
		 			if ( val.length === 1 ) {
		 				hex[ nr ] = "0" + val;
		 			}
		 		});
		 		return hex.join( "" ).toUpperCase();
		 	}
		 	/*
			* http://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb
			*/
			var hexToRgb = function(value) {
				var hex = '#'+value;
				var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
				hex = hex.replace(shorthandRegex, function(m, r, g, b) {
					return r + r + g + g + b + b;
				});

				var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
				return result ? {
					r: parseInt(result[1], 16),
					g: parseInt(result[2], 16),
					b: parseInt(result[3], 16)
				} : null;
			}
			var refreshSwatch = function() {
				var red = $( "#red" ).slider( "value" ),
				green = $( "#green" ).slider( "value" ),
				blue = $( "#blue" ).slider( "value" ),
				hex = hexFromRGB( red, green, blue );
				$( "#swatch" ).css( "background-color", "#" + hex );
				$('#' + containerId + ' > form input[id=color]').val(hex);
			}
			var red = 255;
			var green = 140;
			var blue = 60;
			if (config.color !== undefined) {

				$('#'+containerId).find('input[id=color]').val(
					config.color);
				var rgb = hexToRgb(config.color);
				red = rgb.r;
				green = rgb.g;
				blue = rgb.b;
			}
			$('#'+containerId).find( "#red, #green, #blue" ).slider({
				orientation: "horizontal",
				range: "min",
				max: 255,
				value: 127,
				slide: refreshSwatch,
				change: refreshSwatch
			});
			$('#'+containerId).find( "#red" ).slider( "value", red );
			$('#'+containerId).find( "#green" ).slider( "value", green );
			$('#'+containerId).find( "#blue" ).slider( "value", blue );


		}
		this.exec = function(config) {
			console.log("[ color ] \t\t EXEC");
			this.color = config.color || '000000';
			return {
				pType : this.type,
				response : {
					callback 	: this.colorCallback,
					context : this,
					color : this.color,
					colorArray : this.colorCallback
				}
			};
		}
		// helper
		this.colorCallback = function(data) {

			return initArray(data.length, this.color);
		}
		/** ********************************** */
		/** PRIVATE METHODS **/
		/** ********************************** */
		function initArray(length, value) {
			// console.log("initArray( " + length + ", " + value + " )");
			var arr = [], i = 0;
			arr.length = length;
			while (i < length) {
				arr[i++] = value;
			}
			return arr;
		}

	});
UTILS.CLASS.extend(Plugin,AbstractPlugin);
return Plugin;

});
