define([ 'require', 'config','core/AbstractPlugin.vlib', 'core/Utils.vlib', 'jquery' ], function(require, Config,AbstractPlugin, UTILS, $) {

	/**
	 * @return object dataset object.data == dataset object.color ==
	 *         collorCallback(data)
	 *
	 */
	 /**
			TODO<br />
			@class Plugin File
			@constructor
			@extends AbstractPlugin
			**/
	 var Plugin = (function() {
	 	var name = 'file';
				Plugin.superClass.constuctor.call(this,name);
				Plugin.superClass.setContext.call(this,Config.PLUGINTYPE.CONTEXT_3D);
				Plugin.superClass.setType.call(this,Config.PLUGINTYPE.DATA);
				/** path to plugin-template file * */
				Plugin.superClass.setTemplates.call(this,Config.absPlugins+ '/plugins_3d/file/templates.js');
				Plugin.superClass.setIcon.call(this,Config.absPlugins+ '/plugins_3d/file/icon.png');
				Plugin.superClass.setAccepts.call(this,{
					predecessors : [ Config.PLUGINTYPE.PLOt ],
	 				successors : [ Config.PLUGINTYPE.COLOR, Config.PLUGINTYPE.FUNCTION ]
				});
				Plugin.superClass.setDescription.call(this,'Requires: [ '+this.accepts.predecessors.join(', ')+' ] Accepts: [ '+this.accepts.successors.join(', ')+' ]');
	 	/** ********************************** */
	 	/** PUBLIC VARIABLES * */
	 	/** ********************************** */
		// default color
		this.color = '000000';
		this.heatmap = undefined;

		/** ********************************** */
		/** PUBLIC METHODS * */
		/** ********************************** */
		/**
		 * Takes inserted configuration from the plugin-template and returns the
		 * parameters as JSON-config-file
		 *
		 * @param containerId
		 *            parent container where the plugin-template got added
		 *
		 * @return config file format: { path:VALUE,data:VALUE}
		 */
		 this.getConfigCallback = function(containerId) {
		 	var path = $('#' + containerId).find('#path').html();
		 	var mapping = $('#' + containerId).find('#mapping').html();

		 	var result = {
		 		'path' : path,
		 		mapping : mapping
		 	};
		 	console.log("[ file ][getConfig] " + JSON.stringify(result));
		 	return result;
		 }
		/**
		 * Takes arguments from config and inserts them to the plugin-template
		 *
		 * @param config
		 *            plugin config file
		 * @param containerId
		 *            parent container where the plugin-template got added
		 */
		 this.setConfigCallback = function(config, containerId,files) {

		 	console.log("[ file ][setConfig] " + JSON.stringify(config));
		 	if (config == "" || config === undefined){
		 		config = {data:[]};
		 	}
		 	if (config.path !== undefined && config.path != '') {
		 		$('#' + containerId + ' > form input[id=path]')
		 		.val(config.path);
		 		$.each(files,function(index,file){
		 			if(file.path == config.path){
		 				$('#' + containerId).find('#name').html(files[index].name);
		 				$('#' + containerId).find('#path').html(files[index].path);
		 				$('#' + containerId).find('#link').html(files[index].name);
		 				$('#' + containerId).find('#link').attr("href",files[index].path);
		 				$('#' + containerId).find('#description').html(files[index].description);
		 				$('#' + containerId).find('#mapping').html(
		 					files[index].coordOne+'-'+
		 					files[index].coordTwo+'-'+
		 					files[index].coordThree
		 					);
		 				$('#' + containerId).find('#file-info').removeClass('panel-default');
		 				$('#' + containerId).find('#file-info').attr('class','panel-success');
		 			}
		 		});
		 	}
		 	if (config.data !== undefined) {
		 		$('#' + containerId + ' > form input[id=data]').val(JSON.stringify(config.data));
		 	}

		 	//HELPER
		 	var refreshDataTable = function(config){
		 		//console.log("refresh "+JSON.stringify(config));
		 		var c = $('#' + containerId).find('#dataTableContainer');
		 		c.html('')
		 		$.each(files,function(i,o){
		 			var row = $('<tr/>');
		 			row.append($('<td/>').html('<input id="file-checkbox-'+i+'" type="checkbox" class="file-checkbox">'));
		 			row.append($('<td/>').html(o.name));
		 			row.attr('class','file');
		 			row.attr('title',o.description);
		 			c.append(row);
		 			if($('#' + containerId).find('#path').html() == o.path){
		 				$('#file-checkbox-'+i+'').attr('checked','checked');
		 			}
		 		});
		 	}

		 	$('#' + containerId).find('#file-cnt').html(files.length);
		 	// fill table
		 	refreshDataTable(config);

		 	$('#' + containerId).find('.file-checkbox').change(function(){
		 		var state = this.checked;
		 		$('#' + containerId).find('.file-checkbox').attr('checked',false);
		 		this.checked = state;
		 		if(state){
		 			var index = $(this).attr('id').split('-')[2];
		 			$('#' + containerId).find('#path').html(files[index].path);
		 			$('#' + containerId).find('#name').html(files[index].name);
		 			$('#' + containerId).find('#link').html(files[index].name);
		 			$('#' + containerId).find('#link').attr("href",files[index].path);
		 			$('#' + containerId).find('#description').html(files[index].description);
		 			$('#' + containerId).find('#mapping').html(
		 				files[index].coordOne+'-'+
		 				files[index].coordTwo+'-'+
		 				files[index].coordThree
		 				);
		 			$('#' + containerId).find('#file-info').removeClass('panel-default');
		 			$('#' + containerId).find('#file-info').attr('class','panel-success');


		 		}else{
		 			$('#' + containerId).find('#path').html('');
		 			$('#' + containerId).find('#name').html('');
		 			$('#' + containerId).find('#link').html('');
		 			$('#' + containerId).find('#link').attr('href','');
		 			$('#' + containerId).find('#description').html('');
		 			$('#' + containerId).find('#file-info').removeClass('panel-success');
		 			$('#' + containerId).find('#file-info').attr('class','panel-warning');
		 		}
		 	});


}

this.exec = function(config, childs) {
	console.log("[ dataset ] \t\t EXEC");

	/** *********************************** * */
	/** HANDLE CONFIG * */
	/** *********************************** * */
	if (config.path === undefined )
		return;
	if(config.mapping === undefined){
		config.mapping = "x-y-z";
	}

	var data = [];
	if (config.path.length > 0) {
		data = fetchData(config);
	}
	if (config.data) {
		data = data.concat(config.data);
	}


	/** *********************************** * */
	/** HANDLE SUCCESSOR PLUGINGS * */
	/** *********************************** * */
	var colorCallback 	= null;
	var colorContext = null;
	var functionCallback 	= null;
	var functionContext = null;

	for ( var i = 0; i < childs.length; ++i) {
		child = childs[i];
		if(child !== undefined && child.pType !== undefined){
			if($.inArray(child.pType, this.accepts.successors) != -1){
				switch(child.pType){
					case Config.PLUGINTYPE.COLOR:
					colorCallback = child.response.callback;
					colorContext = child.response.context;
					if(child.response.heatmap !== undefined){
						this.heatmap = child.response.heatmap;
					}
					break;
					case Config.PLUGINTYPE.FUNCTION:
					functionCallback = child.response.callback;
					functionContext = child.response.context;
					break;
				}
			}else{
				alert("!SUCCESSOR");
			}
		}else{
			console.log("pType of child plugin not set!");
		}
	}

			 /*
			 * SCOPE TRAPPING PATTERN
			 * APPLY FUNCTIONCALLBACK WITH GIVEN SCOPE
			 *
			 * CALLBACK AND SCOPE FROM PLUGIN FUNCTION
			 */

			 if (functionCallback != null && functionContext != null) {
			 	data = functionCallback.apply(functionContext,[data]);
			 }
			/*
			 * no color plugin attached. init colorArray with default color
			 */
			 if (colorCallback == null || colorContext == null) {

			 	colorCallback = this.colorCallback;
			 	context = this;
			 }
			/*
			 * SCOPE TRAPPING PATTERN
			 * APPLY COLLORCALLBACK WITH GIVEN SCOPE
			 *
			 * CALLBACK AND SCOPE FROM PLUGIN (COLOR | HEATMAP)
			 */
			 this.colorArray = colorCallback.apply(colorContext,[data]);


			 return {
			 	pType : this.type,
			 	response : {
			 		data 		: data,
			 		color 		: this.color,
			 		heatmap 	: this.heatmap,
			 		colorArray 	: this.colorArray
			 	}
			 };

			}

		// helper
		this.colorCallback = function(data) {
			return initArray(data.length, '000000');
		}
		var initArray = function(length, value) {
			// console.log("initArray( " + length + ", " + value + " )");
			var arr = [], i = 0;
			arr.length = length;
			while (i < length) {
				arr[i++] = value;
			}
			return arr;
		}

		/** ********************************** */
		/** PRIVATE METHODS * */
		/** ********************************** */
		function fetchData(config) {
			var filePath = config.path;
			var mapping = config.mapping.split('-');

			$.ajaxSetup({
				async : false
			});
			var d;
			//$.get(Config.baseData + "/" + file, {}).done(function(data) {
				$.get(filePath, {}).done(function(data) {
					d = new Array();

					var lines = data.split("\n");
					var vertex;
					$(lines).each(function(index, line) {
						cols = line.split(" ");
						// console.log("cols: "+JSON.stringify(cols));
						if (cols.length >= mapping.length) {
							vertex = {};
							for(var i = 0; i < cols.length;++i){
								vertex[mapping[i]] = cols[i];
							}
							// console.log("Vertex:"+JSON.stringify(vertex));
							d.push(vertex);
						}else{
							 console.log('ERROR: file.columns (' + cols.length + ') < ('+mapping.length+')column-mapping');
						}
					});
				});
				$.ajaxSetup({
					async : true
				});
				return d
			}

		});
UTILS.CLASS.extend(Plugin,AbstractPlugin);
return Plugin;

});
