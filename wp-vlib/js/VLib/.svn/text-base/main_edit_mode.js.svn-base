requirejs.config({

	paths : {
		'vlib' : 'core/Vlib',
		'config' : 'config.vlib',
		'pluginLoader' : 'pluginLoader',
		'jquery_ui' : 'libs/jquery-ui/js/jquery-ui-1.10.3.custom.min',
		'jquery' : 'libs/jquery/jquery.min',
		'underscore' : 'libs/underscore/underscore.min',
		'three' : 'libs/three/build/three',
		'three_tween' : 'libs/three/build/tween',
		'three_trackball_controls' : 'libs/three/controls/TrackballControls',
		'three_orbit_controls' : 'libs/three/controls/OrbitAndPanControls',
		'three_buffer' : 'libs/three/build/BufferGeometryUtils',
		'orgChart' : 'libs/jOrgChart/jquery.jOrgChart',
		'bootstrap':'libs/bootstrap/bootstrap.min',
		'd3':'libs/novus/lib/d3.v3',
		'nv':'libs/novus/nv.d3'


	},
	shim : {
		'underscore' : {
			exports : '_'
		},
		'three' : {
			exports : 'THREE'
		},
		'three_tween' : {
			exports : 'TWEEN'
		},
		'three_buffer' : {
			'deps' : ['three'],
			exports : 'THREE'
		},
		'three_trackball_controls' : {
			exports : 'THREE',
			'deps' : ['three']
		},
		'three_orbit_controls' : {
			exports : 'THREE',
			'deps' : ['three']
		},
		'jquery_ui' : {
			exports : '$',
			'deps' : ['jquery']
		},
		'orgChart' : {
			exports : '$',
			'deps' : ['jquery']
		},
		'bootstrap' : {
			'deps' : ['jquery']
		},
		'd3':{
			exports: 'd3'
		},
		'nv':{
			'deps' : ['d3'],
			exports: 'd3'
		}

	}

});

/**
 * MAIN EDIT-MODE
 */
 define(function(require) {

 	require(
 		[ 'jquery', 'config'],
 		function($,Config) {
 			// var absPathToRequestHandler = 'http://localhost/wordpress/wp-content/plugins/test/';
 			var absPathToRequestHandler = "../../";
				// ************************************************************************
				// HELPER
				// ************************************************************************
				var fetshAndRegisterExternaFiles = function(vLib){

					var jsonObj = {"action": "get_files"};
					var postData = JSON.stringify(jsonObj);
					var postArray = {json:postData};
					$.ajax({
						type: 'POST',
						url: absPathToRequestHandler+"process.php",
						data: postArray,
						success: function(data){

							vLib.emptyFileList();
							if(data !== ""){

								var d = $.parseJSON(data);
								for (var i=0; i < d.length; i++) {
									var fileTmp = {
										id 	: d[i].id,
										path	: d[i].file_path,
										name		: d[i].file_name,
										description	: d[i].file_description,
										coordOne		: d[i].coord_one,
										coordTwo		: d[i].coord_two,
										coordThree		: d[i].coord_three
									};
									vLib.registerFile(_.clone(fileTmp));

								}

							}
						// notify list-update
						vLib.publish(Config.CHANNEL_REFRESH);
					}
				});
				}
				var fetshAndRegisterTemplates = function(vLib){
					var jsonObj = {"action": "get_t"};
					var postData = JSON.stringify(jsonObj);
					var postArray = {json:postData};
					$.ajax({
						type: 'POST',
						url: absPathToRequestHandler+"process.php",
						data: postArray,
						success: function(data){
							v.emptyTemplateList();
							if(data !== ""){
								var d = $.parseJSON(data);
								for (var i=0; i < d.length; i++) {
									var templateTmp = {
										id 		 : d[i].id,
										sceneGraph	: JSON.parse(d[i].template_graph),
										name		: d[i].template_name,
										description	: d[i].template_description
									};
									vLib.registerTemplate(_.clone(templateTmp));
								}
							}

							// notify list-update
							v.publish(Config.CHANNEL_REQUEST_TEMPLATES);
						}
					});
				}
				// ************************************************************************
				// CALLBACKS
				// ************************************************************************
				var fileDeleteCB = function(fileIDArray){


					var jsonObj = {};
					console.log(jsonObj);
					jsonObj.action= "delete_files";
					jsonObj.files= fileIDArray;
					console.log(jsonObj);
					//var jsonObj = fileIDArray;
					var postData = JSON.stringify(jsonObj);
					var postArray = {json:postData};
					$.ajax({
						type: 'POST',
						url: absPathToRequestHandler+"process.php",
						data: postArray,
						success: function(response){

							if(response === "1"){
								v.publish(Config.CHANNEL_SUCCESS,'Files deleted! ');
								fetshAndRegisterExternaFiles();
							}else{
								v.publish(Config.CHANNEL_ERROR,'Delete files failed! Response='+response+'] ');
							}
						},
						error: function(e){
							v.publish(Config.CHANNEL_ERROR,'Delete files failed! '+e);
						},
					});


				}
				var fileUploadCB = function(formId){

					var formData = new FormData($(formId)[0]);
					$.ajax({
						url: absPathToRequestHandler+"processFileUpload.php",
						type: 'POST',

						        //Ajax events
						        beforeSend: function(e){},
						        success: function(e){
						        	v.publish(Config.CHANNEL_SUCCESS,'File upload done.! '+e);

						        	// UPDATE LIST
						        	fetshAndRegisterExternaFiles(v);

						        },
						        error: function(e){
						        	v.publish(Config.CHANNEL_ERROR,'Error occurred during file upload! '+e);
						        },
						        // Form data
						        data: formData,
						        //Options to tell jQuery not to process data or worry about content-type.
						        cache: false,
						        contentType: false,
						        processData: false
						    });


				}

				var deleteTemplateCB = function(template){
					// alert('DELETE TEMPLATE CALLBACK in MAIN called: id='
					// 	+template.id
					// 	+ " name=" +template.name
					// 	+" description="+template.description+
					// 	" scG="+template.sceneGraph);
					// ADD AJAX CALL HERE...

					template.action = "delete_t";
					var jsonObj = template;
					var postData = JSON.stringify(jsonObj);
					var postArray = {json:postData};
					$.ajax({
						type: 'POST',
						url: absPathToRequestHandler+"process.php",
						data: postArray,
						success: function(response){

							if(response === "1"){
								v.publish(Config.CHANNEL_SUCCESS,'Template deleted! ');
								fetshAndRegisterTemplates(v);
							}else{
								v.publish(Config.CHANNEL_ERROR,'Delete template failed! Response='+response+'] ');
							}
						},
						error: function(e){
							v.publish(Config.CHANNEL_ERROR,'Delete template failed! '+e);
						},
					});


				}
				var saveTemplateCB = function(obj){

					var template = obj.template;
					if(template.name === ""){
						alert("Please set at least a template-name!");
						return;
					}
					if(!template.sceneGraph){
						alert("No SceneGraph template given!");
						return;
					}
					var jsonObj = {
						action : "save",
						name 		: template.name,
						description 	: template.description,
						sceneGraph 	: template.sceneGraph
					}
					var postData = JSON.stringify(jsonObj);
					var postArray = {json: postData};

					$.ajax({
						type: 'POST',
						url: absPathToRequestHandler+"process.php",
						data: postArray,
						success: function(data){
							v.publish(Config.CHANNEL_SUCCESS,'Template saved! '+data);
							// UPDATE LIST
							fetshAndRegisterTemplates(v);

						},
						error: function(e){
							v.publish(Config.CHANNEL_ERROR,'Save template failed! '+JSON.stringify(e));
						}
					});



				}

				// ************************************************************************
				// INIT vLIB
				// ************************************************************************
				var VLib = require('vlib');
				var v = new VLib();
				console.log("VLib version " + v.version);
				// ************************************************************************
				// REGISTER CORE MODULES
				// ************************************************************************
				var templates = require('core/modules/templates/templates.vlib');
				var controls = require('core/modules/controls/controls.vlib');
				var toolbox = require('core/modules/toolbox/toolbox.vlib');
				var sceneGraph = require('core/modules/scenegraph/scenegraph.vlib');
				var plotModule = require('core/modules/plot/plot.vlib');
				var plot = new plotModule();
				v.registerModule(templates);
				v.registerModule(controls);
				v.registerModule(toolbox);
				v.registerModule(sceneGraph);
				v.registerModule(plot);

				// DELETE DATA CALLBACK
				// TODO: FILL CALLBACK FUNCTION. JQUERY-POST DELETE FROM DB
				// ************************************************************************
				v.setDeleteDataCallback(fileDeleteCB);
				// ************************************************************************
				// UPLOAD DATA CALLBACK
				// TODO: FILL CALLBACK FUNCTION. JQUERY-POST template & insert into DB
				// ************************************************************************
				v.setUploadDataCallback(fileUploadCB);
				// ************************************************************************
				// SAVE TEMPLATE CALLBACK
				// TODO: FILL CALLBACK FUNCTION. JQUERY-POST template & insert into DB
				// ************************************************************************
				v.setSaveTemplateCallback(saveTemplateCB);
				// ************************************************************************
				// DELETE TEMPLATE CALLBACK
				// TODO: DELETE DATASET FROM DB
				// ************************************************************************
				v.setDeleteTemplateCallback(deleteTemplateCB);

				// ************************************************************************
				// INIT
				// ************************************************************************
				templates.init('#vTempl');
				controls.init('#vControls');
				sceneGraph.init('#vGraph');
				toolbox.init('#vList');
				plot.init('#vPlot');
				// ************************************************************************
				// REGISTER DATA FILES
				// FILLED VIA PHP DATABASE REQUEST
				// ************************************************************************
				fetshAndRegisterExternaFiles(v);
				// ************************************************************************
				// REGISTER templates
				// TODO: FIll HELPER FUNCTION. FETSH TEMPLALTES
				// FROM YOUR SERVER AND REGISTER THEM AT VLIB.
				// e.g.: vLib.registerFile({
				//			path		: FILE_PATH,
				//			name		: FILE_NAME,
				//			description	: FILE_DESCRIPTION
				//			});
				// ************************************************************************
				fetshAndRegisterTemplates(v);
				console.log('#######################################');
				console.log('[ main ][channels in use ] '
					+ Object.keys(v.getChannels));
				console.log('[ main ][plugins in use ] '
					+ Object.keys(v.getPlugins));

				console.log("#########################################");
			});






});
