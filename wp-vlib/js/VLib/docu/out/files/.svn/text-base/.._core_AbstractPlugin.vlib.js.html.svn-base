<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>../core/AbstractPlugin.vlib.js</title>
    <link rel="stylesheet" href="http://yui.yahooapis.com/3.9.1/build/cssgrids/cssgrids-min.css">
    <link rel="stylesheet" href="../assets/vendor/prettify/prettify-min.css">
    <link rel="stylesheet" href="../assets/css/main.css" id="site_styles">
    <link rel="shortcut icon" type="image/png" href="../assets/favicon.png">
    <script src="http://yui.yahooapis.com/combo?3.9.1/build/yui/yui-min.js"></script>
</head>
<body class="yui3-skin-sam">

<div id="doc">
    <div id="hd" class="yui3-g header">
        <div class="yui3-u-3-4">
            
                <h1><img src="../assets/css/logo.png" title=""></h1>
            
        </div>
        <div class="yui3-u-1-4 version">
            <em>API Docs for: </em>
        </div>
    </div>
    <div id="bd" class="yui3-g">

        <div class="yui3-u-1-4">
            <div id="docs-sidebar" class="sidebar apidocs">
                <div id="api-list">
    <h2 class="off-left">APIs</h2>
    <div id="api-tabview" class="tabview">
        <ul class="tabs">
            <li><a href="#api-classes">Classes</a></li>
            <li><a href="#api-modules">Modules</a></li>
        </ul>

        <div id="api-tabview-filter">
            <input type="search" id="api-filter" placeholder="Type to filter APIs">
        </div>

        <div id="api-tabview-panel">
            <ul id="api-classes" class="apis classes">
            
                <li><a href="../classes/AbstractPlugin.html">AbstractPlugin</a></li>
            
                <li><a href="../classes/Config.html">Config</a></li>
            
                <li><a href="../classes/Controls.html">Controls</a></li>
            
                <li><a href="../classes/Plot.html">Plot</a></li>
            
                <li><a href="../classes/Plugin 3D.html">Plugin 3D</a></li>
            
                <li><a href="../classes/Plugin Axes.html">Plugin Axes</a></li>
            
                <li><a href="../classes/Plugin BasicMaterial.html">Plugin BasicMaterial</a></li>
            
                <li><a href="../classes/Plugin CameraControl.html">Plugin CameraControl</a></li>
            
                <li><a href="../classes/Plugin Color.html">Plugin Color</a></li>
            
                <li><a href="../classes/Plugin Dataset.html">Plugin Dataset</a></li>
            
                <li><a href="../classes/Plugin File.html">Plugin File</a></li>
            
                <li><a href="../classes/Plugin Function.html">Plugin Function</a></li>
            
                <li><a href="../classes/Plugin Heatmap.html">Plugin Heatmap</a></li>
            
                <li><a href="../classes/Plugin Light.html">Plugin Light</a></li>
            
                <li><a href="../classes/Plugin LinePlot.html">Plugin LinePlot</a></li>
            
                <li><a href="../classes/Plugin Plane.html">Plugin Plane</a></li>
            
                <li><a href="../classes/Plugin ScatterPlot.html">Plugin ScatterPlot</a></li>
            
                <li><a href="../classes/Plugin SurfacePlot.html">Plugin SurfacePlot</a></li>
            
                <li><a href="../classes/Plugin WireframeMaterial.html">Plugin WireframeMaterial</a></li>
            
                <li><a href="../classes/SceneGraph.html">SceneGraph</a></li>
            
                <li><a href="../classes/Templates.html">Templates</a></li>
            
                <li><a href="../classes/Toolbox.html">Toolbox</a></li>
            
                <li><a href="../classes/UTILS.html">UTILS</a></li>
            
                <li><a href="../classes/VLib.html">VLib</a></li>
            
                <li><a href="../classes/VMediator.html">VMediator</a></li>
            
            </ul>

            <ul id="api-modules" class="apis modules">
            
                <li><a href="../modules/Controls.html">Controls</a></li>
            
                <li><a href="../modules/main.html">main</a></li>
            
                <li><a href="../modules/Plot.html">Plot</a></li>
            
                <li><a href="../modules/SceneGraph.html">SceneGraph</a></li>
            
                <li><a href="../modules/Templates.html">Templates</a></li>
            
                <li><a href="../modules/Toolbox.html">Toolbox</a></li>
            
                <li><a href="../modules/VLib.html">VLib</a></li>
            
            </ul>
        </div>
    </div>
</div>

            </div>
        </div>
        <div class="yui3-u-3-4">
                <div id="api-options">
        Show:
        <label for="api-show-inherited">
            <input type="checkbox" id="api-show-inherited" checked>
            Inherited
        </label>

        <label for="api-show-protected">
            <input type="checkbox" id="api-show-protected">
            Protected
        </label>

        <label for="api-show-private">
            <input type="checkbox" id="api-show-private">
            Private
        </label>
        <label for="api-show-deprecated">
            <input type="checkbox" id="api-show-deprecated">
            Deprecated
        </label>

    </div>


            <div class="apidocs">
                <div id="docs-main">
                    <div class="content">
                        <h1 class="file-heading">File: ../core/AbstractPlugin.vlib.js</h1>

<div class="file">
    <pre class="code prettyprint linenums">
define([&#x27;require&#x27;,&#x27;config&#x27;,&#x27;core/utils.vlib&#x27;],function(require,Config,UTILS) {
	/**
	TODO&lt;br /&gt;
	Abstract Class used by plugins.
	@class AbstractPlugin
	@constructor
	@example
		var NewPlugin = function(){
			var name = &#x27;UNIQUE_NAME&#x27;;
			NewPlugin.superClass.constuctor.call(this,name);
			Plugin.superClass.setContext.call(this,Config.PLUGINTYPE.CONTEXT_3D);
			Plugin.superClass.setType.call(this,Config.PLUGINTYPE.PLOT);
			//...
		}
		UTILS.CLASS.extend(NewPlugin,AbstractPlugin);
		//Override abstract methods
		NewPlugin.prototype = {
			exec : function(config,childs){
				//TODO
			}
			//...
		};
	@abstract
	 **/
	var AbstractPlugin = function(name){
		/** ********************************** */
		/** PUBLIC VARIABLES * */
		/** ********************************** */
		/**
		Unique plugin ID.
		@property id
		@type String
		@uses UTILS.getUUID()
		@readOnly
		**/
		this.id = UTILS.getUUID();
		/**
		Unique plugin name.
		@property name
		@type String
		@uses UTILS.getUUID()
		@writeOnce
		**/
		this.name = name;
		/**
		Plugin context according to Config.PLUGINTYPE.(CONTEXT_2D | CONTEXT_3D)
		@property context
		@type {Config.PLUGINTYPE.(CONTEXT_2D | CONTEXT_3D)}
		@writeOnce
		**/
		this.context = undefined;
		/** plugin type according to Config.PLUGINTYPE  **/
		this.type = undefined;

		/**
		Path to plugin-template file
		@property templates
		@type String
		@default undefined
		**/
		this.templates = undefined;
		/**
		path to plugin-icon.&lt;br /&gt;
		Config.absPlugins + PLUGINFOLDER + FILENAME
		@property icon
		@type String
		@default undefined
		**/
		this.icon = Config.absPlugins + &#x27;/default_plugin_icon.png&#x27;;
		/**
		Lists of accepted childs and parents.
		@property accepts
		@type {Object}
		@default {
			predecessors : [  ],
			successors : [  ]}
		**/
		this.accepts = {
			predecessors : [  ],
			successors : [  ]
		}
		/** Informations about PARENT and CHILD plugins **/
		this.description = &#x27;Requires: [ &#x27;+this.accepts.predecessors.join(&#x27;, &#x27;)+&#x27; ] Accepts: [ &#x27;+this.accepts.successors.join(&#x27;, &#x27;)+&#x27; ]&#x27;;
	};

	AbstractPlugin.prototype = {
		/** ********************************** */
		/** PUBLIC METHODS * */
		/** ********************************** */
		/**
		@method setContext
		@public
		@param context {String}
			Config.PLUGINTYPE.(CONTEXT_2D | CONTEXT_3D)
		  **/
		setContext : function(context){
			this.context = context;
		},
		/**
		@method setType
		@public
		@param type {String}
			Config.PLUGINTYPE.XXX
		  **/
		setType : function(type){
			this.type = type;
		},
		/**
		@method setTemplates
		@public
		@param templates {String}
			Path to html-script-template file.
		  **/
		setTemplates : function(templates){
			this.templates = templates;
		},
		/**
		@method setIcon
		@public
		@param type {icon}
			Path to icon.
		  **/
		setIcon : function(icon){
			this.icon = icon;
		},
		/**
		Lists of accepted childs and parents.
		@method setAccepts
		@public
		@param accepts {Object} {
			predecessors : [  ],
			successors : [  ]
			}
		**/
		setAccepts : function(accepts){
			this.accepts = accepts;
		},
		/**
		@method setDescription
		@public
		@param description {icon}
			Description.
		  **/
		setDescription : function(description){
			this.description = description;
		},
		/** ********************************** */
		/** ABSTRACT METHODS * */
		/** ********************************** */
		/**
		Takes configuration from the plugin-template and
		returns the parameters as JSON-config-file&lt;br /&gt;
		THIS IS AN ABSTRACT METHOD AND HAS TO BE OVERWRITTEN.
		@method getConfigCallback
		@abstract
		@param containerId {String}
			Parent container which encloses the
			plugin - config - form ( defined by @property templates)
		 @return {Object}
		  	Plugin config file
		  **/
		getConfigCallback : function(containerId) {
			throw new Error(&#x27;Unsupported operation on an abstract method.&#x27;);
		},
		/**
		 *
		 *
		 *
		 * @param config
		 *            plugin config file
		 * @param containerId
		 *            parent container where the plugin-template got
		 *            added
		 */
		 /**
		Takes arguments from config and inserts them to the
		plugin-template&lt;br /&gt;
		THIS IS AN ABSTRACT METHOD AND HAS TO BE OVERWRITTEN.
		 @method setConfigCallback
		 @abstract
		 @param config {Object}
		 	Plugin configuration object

		 @param containerId {String}
			Parent container which encloses the
			plugin - config - form ( defined by @property templates)

		 @return {Object}
		 	Plugin config file
		 **/
		 setConfigCallback : function(config, containerId) {
			throw new Error(&#x27;Unsupported operation on an abstract method.&#x27;);
		},
		/**
		Where the magic happens...&lt;br /&gt;
		Called by parser&lt;br /&gt;
		THIS IS AN ABSTRACT METHOD AND HAS TO BE OVERWRITTEN.
		 @method exec
		 @abstract
		 @param config {Object}
		 	Plugin configuration object

		 @param childs {Array}
			Array of child plugins.&lt;br /&gt;
			to be more precise: The results of childs-exec() methods.

		 @return {Object}

		 **/
		exec :  function(config,childs) {
			throw new Error(&#x27;Unsupported operation on an abstract method.&#x27;);
		}

	}



	return AbstractPlugin;

});

    </pre>
</div>

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script src="../assets/vendor/prettify/prettify-min.js"></script>
<script>prettyPrint();</script>
<script src="../assets/js/yui-prettify.js"></script>
<script src="../assets/../api.js"></script>
<script src="../assets/js/api-filter.js"></script>
<script src="../assets/js/api-list.js"></script>
<script src="../assets/js/api-search.js"></script>
<script src="../assets/js/apidocs.js"></script>
</body>
</html>
