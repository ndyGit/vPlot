<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>../plugins/plugins_3d/surfaceplot/surfaceplot.vlib.js</title>
    <link rel="stylesheet" href="http://yui.yahooapis.com/3.9.1/build/cssgrids/cssgrids-min.css">
    <link rel="stylesheet" href="../assets/vendor/prettify/prettify-min.css">
    <link rel="stylesheet" href="../assets/css/main.css" id="site_styles">
    <link rel="shortcut icon" type="image/png" href="../assets/favicon.png">
    <script src="http://yui.yahooapis.com/combo?3.9.1/build/yui/yui-min.js"></script>
</head>
<body class="yui3-skin-sam">

<div id="doc">
    <div id="hd" class="yui3-g header">
        <div class="yui3-u-3-4">
            
                <h1><img src="../assets/css/logo.png" title=""></h1>
            
        </div>
        <div class="yui3-u-1-4 version">
            <em>API Docs for: </em>
        </div>
    </div>
    <div id="bd" class="yui3-g">

        <div class="yui3-u-1-4">
            <div id="docs-sidebar" class="sidebar apidocs">
                <div id="api-list">
    <h2 class="off-left">APIs</h2>
    <div id="api-tabview" class="tabview">
        <ul class="tabs">
            <li><a href="#api-classes">Classes</a></li>
            <li><a href="#api-modules">Modules</a></li>
        </ul>

        <div id="api-tabview-filter">
            <input type="search" id="api-filter" placeholder="Type to filter APIs">
        </div>

        <div id="api-tabview-panel">
            <ul id="api-classes" class="apis classes">
            
                <li><a href="../classes/AbstractPlugin.html">AbstractPlugin</a></li>
            
                <li><a href="../classes/Config.html">Config</a></li>
            
                <li><a href="../classes/Controls.html">Controls</a></li>
            
                <li><a href="../classes/Plot.html">Plot</a></li>
            
                <li><a href="../classes/Plugin 3D.html">Plugin 3D</a></li>
            
                <li><a href="../classes/Plugin Axes.html">Plugin Axes</a></li>
            
                <li><a href="../classes/Plugin BasicMaterial.html">Plugin BasicMaterial</a></li>
            
                <li><a href="../classes/Plugin CameraControl.html">Plugin CameraControl</a></li>
            
                <li><a href="../classes/Plugin Color.html">Plugin Color</a></li>
            
                <li><a href="../classes/Plugin Dataset.html">Plugin Dataset</a></li>
            
                <li><a href="../classes/Plugin File.html">Plugin File</a></li>
            
                <li><a href="../classes/Plugin Function.html">Plugin Function</a></li>
            
                <li><a href="../classes/Plugin Heatmap.html">Plugin Heatmap</a></li>
            
                <li><a href="../classes/Plugin Light.html">Plugin Light</a></li>
            
                <li><a href="../classes/Plugin LinePlot.html">Plugin LinePlot</a></li>
            
                <li><a href="../classes/Plugin Plane.html">Plugin Plane</a></li>
            
                <li><a href="../classes/Plugin ScatterPlot.html">Plugin ScatterPlot</a></li>
            
                <li><a href="../classes/Plugin SurfacePlot.html">Plugin SurfacePlot</a></li>
            
                <li><a href="../classes/Plugin WireframeMaterial.html">Plugin WireframeMaterial</a></li>
            
                <li><a href="../classes/SceneGraph.html">SceneGraph</a></li>
            
                <li><a href="../classes/Templates.html">Templates</a></li>
            
                <li><a href="../classes/Toolbox.html">Toolbox</a></li>
            
                <li><a href="../classes/UTILS.html">UTILS</a></li>
            
                <li><a href="../classes/VLib.html">VLib</a></li>
            
                <li><a href="../classes/VMediator.html">VMediator</a></li>
            
            </ul>

            <ul id="api-modules" class="apis modules">
            
                <li><a href="../modules/Controls.html">Controls</a></li>
            
                <li><a href="../modules/main.html">main</a></li>
            
                <li><a href="../modules/Plot.html">Plot</a></li>
            
                <li><a href="../modules/SceneGraph.html">SceneGraph</a></li>
            
                <li><a href="../modules/Templates.html">Templates</a></li>
            
                <li><a href="../modules/Toolbox.html">Toolbox</a></li>
            
                <li><a href="../modules/VLib.html">VLib</a></li>
            
            </ul>
        </div>
    </div>
</div>

            </div>
        </div>
        <div class="yui3-u-3-4">
                <div id="api-options">
        Show:
        <label for="api-show-inherited">
            <input type="checkbox" id="api-show-inherited" checked>
            Inherited
        </label>

        <label for="api-show-protected">
            <input type="checkbox" id="api-show-protected">
            Protected
        </label>

        <label for="api-show-private">
            <input type="checkbox" id="api-show-private">
            Private
        </label>
        <label for="api-show-deprecated">
            <input type="checkbox" id="api-show-deprecated">
            Deprecated
        </label>

    </div>


            <div class="apidocs">
                <div id="docs-main">
                    <div class="content">
                        <h1 class="file-heading">File: ../plugins/plugins_3d/surfaceplot/surfaceplot.vlib.js</h1>

<div class="file">
    <pre class="code prettyprint linenums">
define(
	[ &#x27;require&#x27;, &#x27;config&#x27;,&#x27;core/utils.vlib&#x27;, &#x27;three&#x27; ],

	function(require, Config, UTILS, THREE) {
		/**
		TODO&lt;br /&gt;
		@class Plugin SurfacePlot
		@constructor
		@extends AbstractPlugin
		**/
		var plugin = (function(state) {

			/** ********************************** */
			/** PRIVATE VARIABLES * */
			/** ********************************** */
			var particleSizeDefault = 10;
			var opacityDefault = 1;
			var blendingDefault = false;
			var colorsDefault = true;
			var transparentDefault = false;
			var ambientDefault = &#x27;#FFFFFF&#x27;;
			var xScaleDefault = 400;
			var yScaleDefault = 400;
			var zScaleDefault = 400;

			var dimX = &#x27;auto&#x27;;
			var dimY = &#x27;auto&#x27;;


			var x_SCALE_MAX = 400;
			var x_SCALE_MIN = 0;
			var y_SCALE_MAX = 400;
			var y_SCALE_MIN = 0;
			var z_SCALE_MAX = 400;
			var z_SCALE_MIN = 0;

			if(state !== undefined){
				// dimX = state.dimX;
				// dimY = state.dimY;
				// x_MAX = state.x_MAX;
				// x_MIN = state.x_MIN;
				// y_MAX = state.y_MAX;
				// y_MIN = state.y_MIN;
				// z_MAX = state.z_MAX;
				// z_MIN = state.z_MIN;
				// x_SCALE_MAX = state.x_SCALE_MAX;
				// x_SCALE_MIN = state.x_SCALE_MIN;
				// y_SCALE_MAX = state.y_SCALE_MAX;
				// z_SCALE_MAX = state.z_SCALE_MAX;
				// z_SCALE_MIN = state.z_SCALE_MIN;
			}
				/**
				 * @return returns copy of this object
				 * 			state of public and private variables will be set properly
				 */
				 this.deepCopy = function(){
				 	var privates = {
				 		// dimX : dimX,
				 		// dimY : dimY,
				 		// x_MAX : x_MAX,
				 		// x_MIN : x_MIN,
				 		// y_MAX : y_MAX,
				 		// y_MAX : y_MAX,
				 		// y_MIN : y_MIN,
				 		// z_MAX : z_MAX,
				 		// z_MIN : z_MIN,
				 		// x_SCALE_MAX : x_SCALE_MAX,
				 		// x_SCALE_MIN : x_SCALE_MIN,
				 		// y_SCALE_MAX : y_SCALE_MAX,
				 		// y_SCALE_MIN : y_SCALE_MIN,
				 		// z_SCALE_MAX : z_SCALE_MAX,
				 		// z_SCALE_MIN : z_SCALE_MIN

				 	}
				 	return new plugin(undefined);
				 }
				 /** ********************************** */
				 /** PUBLIC VARIABLES * */
				 /** ********************************** */
				 this.context = Config.PLUGINTYPE.CONTEXT_3D;
				 this.type = Config.PLUGINTYPE.PLOT;
				 this.name = &#x27;surfaceplot&#x27;;
				 this.accepts = {
				 	predecessors : [ Config.PLUGINTYPE.CONTEXT_3D ],
				 	successors : [ Config.PLUGINTYPE.DATA, Config.PLUGINTYPE.AXES, Config.PLUGINTYPE.MATERIAL ]
				 }
				 /** path to plugin-template file * */
				 this.templates = Config.absPlugins
				 + &#x27;/plugins_3d/surfaceplot/templates.js&#x27;;
				 this.icon = Config.absPlugins
				 + &#x27;/plugins_3d/surfaceplot/icon.png&#x27;;
				 this.description = &#x27;Requires: [ &#x27;+this.accepts.predecessors.join(&#x27;, &#x27;)+&#x27; ] Accepts: [ &#x27;+this.accepts.successors.join(&#x27;, &#x27;)+&#x27; ]&#x27;;
				 /** ********************************** */
				 /** PUBLIC METHODS * */
				 /** ********************************** */
				/**
				 * Takes inserted configuration from the plugin-template and
				 * returns the parameters as JSON-config-file
				 *
				 * @param containerId
				 *            parent container where the plugin-template got
				 *            added
				 *
				 * @return config file format:
				 *         {camera:{x:VALUE,y:VALUE,z:VALUE}}
				 */
				 this.getConfigCallback = function(containerId) {

				 	var sortBy = $(&#x27;#&#x27; + containerId + &#x27; #selectSort&#x27;).find(&quot;:selected&quot;).val();

				 	var xDim = $(&#x27;#&#x27; + containerId + &#x27; #xDim&#x27;).val();
				 	var yDim = $(&#x27;#&#x27; + containerId + &#x27; #yDim&#x27;).val();

				 	var xScale = $(&#x27;#&#x27; + containerId + &#x27; #xScale&#x27;).val();
				 	var yScale = $(&#x27;#&#x27; + containerId + &#x27; #yScale&#x27;).val();
				 	var zScale = $(&#x27;#&#x27; + containerId + &#x27; #zScale&#x27;).val();

				 	var result = {
				 		sortBy : sortBy,
				 		scale : {
				 			&#x27;x&#x27; : xScale === &quot;&quot; ? xScaleDefault : xScale,
				 			&#x27;y&#x27; : yScale === &quot;&quot; ? yScaleDefault : yScale,
				 			&#x27;z&#x27; : zScale === &quot;&quot; ? zScaleDefault : zScale

				 		}
				 	};
				 	console.log(&quot;[ surface ][getConfig] &quot;);
				 	return result;

				 }
				/**
				 * Takes arguments from config and inserts them to the
				 * plugin-template
				 *
				 * @param config
				 *            plugin config file
				 * @param containerId
				 *            parent container where the plugin-template got
				 *            added
				 */
				 this.setConfigCallback = function(config, containerId) {

				 	console.log(&quot;[ surface ][setConfig] &quot;);
				 	if (config === &quot;&quot; || config === undefined) {
				 		config = {
				 			sortBy : &#x27;&#x27;,
				 			scale : {}
				 		};
				 	}

				 	if(config.scale === undefined){
				 		config.scale = {};
				 	}

				 	if (config.sortBy !== undefined) {

				 		$(&#x27;#&#x27; + containerId ).find(&#x27; #selectSort&#x27;).val(config.sortBy);

				 	}

				 	if (config.scale.x !== undefined) {
				 		$(&#x27;#&#x27; + containerId + &#x27; #xScale&#x27;).val(config.scale.x);
				 	} else {
				 		$(&#x27;#&#x27; + containerId + &#x27; #xScale&#x27;).val(xScaleDefault);
				 	}
				 	if (config.scale.y !== undefined) {
				 		$(&#x27;#&#x27; + containerId + &#x27; #yScale&#x27;).val(config.scale.y);
				 	} else {
				 		$(&#x27;#&#x27; + containerId + &#x27; #yScale&#x27;).val(yScaleDefault);
				 	}
				 	if (config.scale.z !== undefined) {
				 		$(&#x27;#&#x27; + containerId + &#x27; #zScale&#x27;).val(config.scale.z);
				 	} else {
				 		$(&#x27;#&#x27; + containerId + &#x27; #zScale&#x27;).val(zScaleDefault);
				 	}


				 }

				 this.exec = function(config, childs) {

				 	console.log(&quot;   EXEC surfaceplot &quot;+JSON.stringify(config)+&#x27; c:&#x27;+childs.length);
				 	var result = [];

				 	if (config === &#x27;&#x27;) {
				 		config = {};
				 	}
					// set scaling
					if (config.hasOwnProperty(&#x27;scale&#x27;)) {
						x_SCALE_MAX = config.scale.x;
						y_SCALE_MAX = config.scale.y;
						z_SCALE_MAX = config.scale.z;
					}
					var borders = {
						xMax : &#x27;auto&#x27;,
						yMax : &#x27;auto&#x27;,
						zMax : &#x27;auto&#x27;,
						xMin : &#x27;auto&#x27;,
						yMin : &#x27;auto&#x27;,
						zMin : &#x27;auto&#x27;
					}

					var data = [];
					var colors = [];
					var materials = [];
					var axesSet = false;
					var heatmaps = [];
					/** *********************************** * */
					/** HANDLE SUCCESSOR PLUGINGS * */
					/** *********************************** * */
					var child = undefined;
					for ( var i = 0; i &lt; childs.length; ++i) {
						child = childs[i];
						if(child !== undefined &amp;&amp; child.pType !== undefined){
							if($.inArray(child.pType, this.accepts.successors) != -1){
								switch(child.pType){
									case Config.PLUGINTYPE.DATA:
									var tmpData = child.response.data;
									var tmpColor = child.response.colorArray
									if(child.response.heatmap !== undefined){
										heatmaps.push(child.response.heatmap);
									}
									data = data.concat(tmpData);
									colors = colors.concat(tmpColor);

									break;
									case Config.PLUGINTYPE.AXES:
									var callback = child.response.callback;
									var context = child.response.context;
									borders.xMax = child.response.rangeX;
									borders.yMax = child.response.rangeY;
									borders.zMax = child.response.rangeZ;
									axesSet = true;
									break;
									case Config.PLUGINTYPE.MATERIAL:
										// sort materials. make sure that wireframe is on the last position
										// otherwise all other materials will be overruled...
										// CHECK FOR BETTER SOLUTION!
										//materials.push(childs[i][key].material);
										if(child.response.type == &#x27;wireframeMaterial&#x27;){
											materials.push(child.response.material);
										}else{
											materials.unshift(child.response.material);
										}
										break;
									}
								}
							}else{
								console.log(&quot;pType of child plugin not set!&quot;);
							}
						}
						// no data... nothing todo...
						if(data.length == 0) return;

						/** *********************************** */
						/** GET MAX VALUES * */
						/** CHECK RANGE - auto * */

						var minMax = UTILS.C3D.getMinMax(data);

						borders.xMax = borders.xMax  !== &#x27;auto&#x27; ? borders.xMax : minMax.xMax;
						borders.yMax = borders.yMax  !== &#x27;auto&#x27; ? borders.yMax : minMax.yMax;
						borders.zMax = borders.zMax  !== &#x27;auto&#x27; ? borders.zMax : minMax.zMax;
						borders.xMin = borders.xMin  !== &#x27;auto&#x27; ? borders.xMin : minMax.xMin;
						borders.yMin = borders.yMin  !== &#x27;auto&#x27; ? borders.yMin : minMax.yMin;
						borders.zMin = borders.zMin  !== &#x27;auto&#x27; ? borders.zMin : minMax.zMin;

						/** *********************************** */

						/** GET PLOT DIMENSION x-y * */
						var dim = UTILS.C3D.getDimensions(data);
						dimX = dim.d2;
						dimY = dim.d1;
						/** *********************************** */

						/** *********************************** */

						/** SORT DATA? * */
						if(config.sortBy !== undefined &amp;&amp; config.sortBy != &#x27;&#x27;){
							data = UTILS.sortBy(data,config.sortBy);
							var last = null;

						}
						/** SCALE DATA * */
						var scaled_data = scale(data,borders);

						/** *********************************** */
						/** handle axes * */
						if (axesSet) {
							var axes = callback.apply(context, [ data, scaled_data,colors,
								x_SCALE_MAX, y_SCALE_MAX, z_SCALE_MAX, borders, minMax, heatmaps ]);
							for ( var index = 0; index &lt; axes.length; ++index) {
							// add axes to scene
							result.push(axes[index]);
						}
					}
					/** *********************************** */
					/** APPLY GEOMETRY * */

					var intersectionObjects = [];
					/*
					 * convert color array to THREE.COLOR array
					 */
					 var threeColors = [];
					 for ( var index = 0; index &lt; data.length; index++) {
					 	threeColors[index] = new THREE.Color(&#x27;#&#x27;
					 		+ colors[index]);
					 }



					 var geometry = new THREE.PlaneGeometry(x_SCALE_MAX,
					 	y_SCALE_MAX, dimX-1, dimY-1);


					 geometry.dynamic = true;
					 geometry.computeFaceNormals();
					 geometry.computeVertexNormals();
					 geometry.computeCentroids();

					 for ( var i = 0; i &lt; scaled_data.length; i++) {

					 	geometry.vertices[i].x = scaled_data[i].x;
					 	geometry.vertices[i].y = scaled_data[i].y;
					 	geometry.vertices[i].z = scaled_data[i].z;

					 }

					// colorize face vertices
					geometry.colors = threeColors;
					// faces are indexed using characters
					var faceIndices = [ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27; ];
					// copy the colors to corresponding positions
					// in each face&#x27;s vertexColors array.
					for ( var i = 0; i &lt; geometry.faces.length; i++) {
						face = geometry.faces[i];
						numberOfSides = (face instanceof THREE.Face3) ? 3 : 4;
						for ( var j = 0; j &lt; numberOfSides; j++) {
							vertexIndex = face[faceIndices[j]];
							face.vertexColors[j] = geometry.colors[vertexIndex];
						}
					}


					var material = new THREE.MeshBasicMaterial({
						color : 0x000000,
						wireframe : true,
						side : THREE.DoubleSide,
						wireframeLinewidth: 2,
						transparent : true,
						opacity: 0.9
					});

					if(materials.length === 0){
						materials.push(material);
					}

					// var bufferGeometry = THREE.BufferGeometryUtils.fromGeometry( geometry,{
					// 	vertexColors : true
					// } );
					var mesh = new THREE.Mesh(geometry);
					var multiMaterialObject = THREE.SceneUtils.createMultiMaterialObject(
						mesh.geometry.clone(), materials);

					mesh.castShadow = true;
					mesh.receiveShadow = false;
					mesh.geometry.colorsNeedUpdate = true;
					mesh.position.set(0, 0, 0);
					mesh.material.side = THREE.DoubleSide;
					mesh.geometry.__dirtyVertices = true;
					mesh.geometry.__dirtyNormals = true;

					var intersectionObject = {
						object		:	mesh,
						data		:	data,
						scaledData 	:	scaled_data
					}

					result.push(multiMaterialObject);
					intersectionObjects.push(intersectionObject);

					return {
						pType : this.type,
						response : result,
						intersectionObjects	: intersectionObjects
					};


				}

				/** ********************************** */
				/** PRIVATE METHODS * */
				/** ********************************** */
				var scale = function(data,borders) {

					var b2 = {
						&quot;x_MAX&quot;:borders.xMax,
						&quot;y_MAX&quot;:borders.yMax,
						&quot;z_MAX&quot;:borders.zMax,
						&quot;x_MIN&quot;:borders.xMin,
						&quot;y_MIN&quot;:borders.yMin,
						&quot;z_MIN&quot;:borders.zMin,
						&quot;x_SCALE_MIN&quot; : x_SCALE_MIN,
						&quot;y_SCALE_MIN&quot; : y_SCALE_MIN,
						&quot;z_SCALE_MIN&quot; : z_SCALE_MIN,
						&quot;x_SCALE_MAX&quot; : x_SCALE_MAX,
						&quot;y_SCALE_MAX&quot; : y_SCALE_MAX,
						&quot;z_SCALE_MAX&quot; : z_SCALE_MAX,
					};
					return UTILS.C3D.scaleLinearToRange(data,b2);
				}




			});

return plugin;

});

    </pre>
</div>

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script src="../assets/vendor/prettify/prettify-min.js"></script>
<script>prettyPrint();</script>
<script src="../assets/js/yui-prettify.js"></script>
<script src="../assets/../api.js"></script>
<script src="../assets/js/api-filter.js"></script>
<script src="../assets/js/api-list.js"></script>
<script src="../assets/js/api-search.js"></script>
<script src="../assets/js/apidocs.js"></script>
</body>
</html>
