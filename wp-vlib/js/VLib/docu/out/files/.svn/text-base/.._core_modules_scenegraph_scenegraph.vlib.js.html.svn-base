<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>../core/modules/scenegraph/scenegraph.vlib.js</title>
    <link rel="stylesheet" href="http://yui.yahooapis.com/3.9.1/build/cssgrids/cssgrids-min.css">
    <link rel="stylesheet" href="../assets/vendor/prettify/prettify-min.css">
    <link rel="stylesheet" href="../assets/css/main.css" id="site_styles">
    <link rel="shortcut icon" type="image/png" href="../assets/favicon.png">
    <script src="http://yui.yahooapis.com/combo?3.9.1/build/yui/yui-min.js"></script>
</head>
<body class="yui3-skin-sam">

<div id="doc">
    <div id="hd" class="yui3-g header">
        <div class="yui3-u-3-4">
            
                <h1><img src="../assets/css/logo.png" title=""></h1>
            
        </div>
        <div class="yui3-u-1-4 version">
            <em>API Docs for: </em>
        </div>
    </div>
    <div id="bd" class="yui3-g">

        <div class="yui3-u-1-4">
            <div id="docs-sidebar" class="sidebar apidocs">
                <div id="api-list">
    <h2 class="off-left">APIs</h2>
    <div id="api-tabview" class="tabview">
        <ul class="tabs">
            <li><a href="#api-classes">Classes</a></li>
            <li><a href="#api-modules">Modules</a></li>
        </ul>

        <div id="api-tabview-filter">
            <input type="search" id="api-filter" placeholder="Type to filter APIs">
        </div>

        <div id="api-tabview-panel">
            <ul id="api-classes" class="apis classes">
            
                <li><a href="../classes/AbstractPlugin.html">AbstractPlugin</a></li>
            
                <li><a href="../classes/Config.html">Config</a></li>
            
                <li><a href="../classes/Controls.html">Controls</a></li>
            
                <li><a href="../classes/Plot.html">Plot</a></li>
            
                <li><a href="../classes/Plugin 3D.html">Plugin 3D</a></li>
            
                <li><a href="../classes/Plugin Axes.html">Plugin Axes</a></li>
            
                <li><a href="../classes/Plugin BasicMaterial.html">Plugin BasicMaterial</a></li>
            
                <li><a href="../classes/Plugin CameraControl.html">Plugin CameraControl</a></li>
            
                <li><a href="../classes/Plugin Color.html">Plugin Color</a></li>
            
                <li><a href="../classes/Plugin Dataset.html">Plugin Dataset</a></li>
            
                <li><a href="../classes/Plugin File.html">Plugin File</a></li>
            
                <li><a href="../classes/Plugin Function.html">Plugin Function</a></li>
            
                <li><a href="../classes/Plugin Heatmap.html">Plugin Heatmap</a></li>
            
                <li><a href="../classes/Plugin Light.html">Plugin Light</a></li>
            
                <li><a href="../classes/Plugin LinePlot.html">Plugin LinePlot</a></li>
            
                <li><a href="../classes/Plugin Plane.html">Plugin Plane</a></li>
            
                <li><a href="../classes/Plugin ScatterPlot.html">Plugin ScatterPlot</a></li>
            
                <li><a href="../classes/Plugin SurfacePlot.html">Plugin SurfacePlot</a></li>
            
                <li><a href="../classes/Plugin WireframeMaterial.html">Plugin WireframeMaterial</a></li>
            
                <li><a href="../classes/SceneGraph.html">SceneGraph</a></li>
            
                <li><a href="../classes/Templates.html">Templates</a></li>
            
                <li><a href="../classes/Toolbox.html">Toolbox</a></li>
            
                <li><a href="../classes/UTILS.html">UTILS</a></li>
            
                <li><a href="../classes/VLib.html">VLib</a></li>
            
                <li><a href="../classes/VMediator.html">VMediator</a></li>
            
            </ul>

            <ul id="api-modules" class="apis modules">
            
                <li><a href="../modules/Controls.html">Controls</a></li>
            
                <li><a href="../modules/main.html">main</a></li>
            
                <li><a href="../modules/Plot.html">Plot</a></li>
            
                <li><a href="../modules/SceneGraph.html">SceneGraph</a></li>
            
                <li><a href="../modules/Templates.html">Templates</a></li>
            
                <li><a href="../modules/Toolbox.html">Toolbox</a></li>
            
                <li><a href="../modules/VLib.html">VLib</a></li>
            
            </ul>
        </div>
    </div>
</div>

            </div>
        </div>
        <div class="yui3-u-3-4">
                <div id="api-options">
        Show:
        <label for="api-show-inherited">
            <input type="checkbox" id="api-show-inherited" checked>
            Inherited
        </label>

        <label for="api-show-protected">
            <input type="checkbox" id="api-show-protected">
            Protected
        </label>

        <label for="api-show-private">
            <input type="checkbox" id="api-show-private">
            Private
        </label>
        <label for="api-show-deprecated">
            <input type="checkbox" id="api-show-deprecated">
            Deprecated
        </label>

    </div>


            <div class="apidocs">
                <div id="docs-main">
                    <div class="content">
                        <h1 class="file-heading">File: ../core/modules/scenegraph/scenegraph.vlib.js</h1>

<div class="file">
    <pre class="code prettyprint linenums">
define([&#x27;require&#x27;, &#x27;config&#x27;, &#x27;core/utils.vlib&#x27;, &#x27;jquery&#x27;, &#x27;underscore&#x27;, &#x27;orgChart&#x27;], function(require, Config, Utils,$,_) {
	&#x27;use strict&#x27;;
			/**
			TODO&lt;br /&gt;
			@module SceneGraph
			@class SceneGraph
			**/
			var module = (function() {
				var _name = &#x27;sceneGraph&#x27;;
				var plugins = null;
				var loadedTemplates = [];
				var files = [];
				var _templates = Config.absModules + &#x27;/scenegraph/templates.js&#x27;;

				var Tree = Utils.struct.treeNode;

				var treeName = &#x27;&#x27;;
				var treeDescription = &#x27;&#x27;;
				var tree = null;

				var isRegisterd = function() {
					return (typeof module.subscribe === &#x27;function&#x27;) &amp;&amp; (typeof module.publish === &#x27;function&#x27;);
				};
				var _init = function(container) {

					if (isRegisterd()) {
						this.container = $(container);
				//module.container.css(&#x27;height&#x27;, module.container.width());
					// inject templates
					module.publish(Config.CHANNEL_INJECT_SCRIPTTEMPLATE, {
						url: _templates
					}); /** *************************************** */
					/* CALL YOUR FUNCTIONS HERER */
					/** *************************************** */
					addListener();
					addGui();
					reset();
					refresh();

					// get plugins from core
					// console.log(&#x27;[ sceneGraph ][ requesting plugins ]&#x27;);
					module.publish(&#x27;requestPlugins&#x27;, {
						src: _name
					});
					module.publish(Config.CHANNEL_REQUEST_FILES);

					/** *************************************** */
				} else {
					this.publish(Config.CHANNEL_ERROR,&#x27;Module SceneGraph not registered! Use VLib.registerModule(obj) first.&#x27;);
					throw &#x27;Module [ &#x27; + this.name + &#x27; ] not registered! Use VLib.registerModule(obj) first.&#x27;;
				}

			};

			/** *************************************** */
			/* ADD PRIVATE CODE HERER */
			/** *************************************** */
			var addGui = function() {
				module.container.html(&#x27;&lt;h2&gt;SceneGraph&lt;/h2&gt;&#x27;);
				module.container.append(&#x27;&lt;div id=&quot;sceneGraph-data&quot;&gt;&lt;/div&gt;&#x27;);
				module.container.append(&#x27;&lt;div id=&quot;sceneGraph&quot; class=&quot;orgChart&quot;&gt;&lt;/div&gt;&#x27;);
				// module.publish(Config.CHANNEL_SCENEGRAPH_UPDATE, tree);

			};

			/* LISTENERS */
			var addListener = function() {
				/**
				SUBSCRIPTION&lt;br /&gt;
				@event Config.CHANNEL_RESPOND_PLUGINS
				*/
				module.subscribe(Config.CHANNEL_RESPOND_PLUGINS, respondPluginhandle);
				/**
				SUBSCRIPTION&lt;br /&gt;
				@event Config.CHANNEL_RESPOND_FILES
				*/
				module.subscribe(Config.CHANNEL_RESPOND_FILES, respondFileshandle);
				//module.subscribe(Config.CHANNEL_RENDER_TEMPLATE, setTemplateHandle);
				/**
				SUBSCRIPTION&lt;br /&gt;
				Incoming message is an object {name:VALUE,description:VALUE,template:OBJECT(sceneGraph-tree)}.&lt;br /&gt;

				@event Config.CHANNEL_TEMPLATES_TEMPLATE_SELECTED
				@bubbles
					Config.CHANNEL_SCENEGRAPH_UPDATE
					Config.CHANNEL_RENDER_TEMPLATE
					Config.CHANNEL_SCENEGRAPH_CONTEXT
				@broadcast
					Config.CHANNEL_SCENEGRAPH_UPDATE
					Config.CHANNEL_RENDER_TEMPLATE
					Config.CHANNEL_SCENEGRAPH_CONTEXT
					*/
					module.subscribe(Config.CHANNEL_TEMPLATES_TEMPLATE_SELECTED, setTemplateHandle);
				/**
				SUBSCRIPTION&lt;br /&gt;
				@event Config.CHANNEL_RESET
				@bubbles
					Config.CHANNEL_SCENEGRAPH_UPDATE
					Config.CHANNEL_RENDER_TEMPLATE
				@broadcast
					Config.CHANNEL_SCENEGRAPH_UPDATE
					Config.CHANNEL_RENDER_TEMPLATE
					*/
					module.subscribe(Config.CHANNEL_RESET, function(){
						reset();
						refresh();
					});
				/**
				SUBSCRIPTION&lt;br /&gt;
				@event Config.CHANNEL_REFRESH
				@bubbles
					Config.CHANNEL_SCENEGRAPH_UPDATE
					Config.CHANNEL_RENDER_TEMPLATE
				@broadcast
					Config.CHANNEL_SCENEGRAPH_UPDATE
					Config.CHANNEL_RENDER_TEMPLATE
					*/
					module.subscribe(Config.CHANNEL_REFRESH, refresh);

				};

				var setTemplateHandle = function(obj) {

					var t = obj.template;
				// remove drop behavior from base container
				removeDropBehaviorFromBase();

				// set tree
				tree = templateToTree(t.sceneGraph);

				treeName = t.name;
				treeDescription = t.description;
				$(&#x27;#&#x27;+module.container.attr(&#x27;id&#x27;)).find(&#x27;h2&#x27;).html(&#x27;SceneGraph &#x27;+treeName);
				// repaint scenegraph
				refresh();
				//publish new context
				updateContext();
			};
			var updateContext = function(){
				//publish new context
				module.publish(Config.CHANNEL_SCENEGRAPH_CONTEXT, {
					context: plugins[tree.name].context
				});
			};
			var removeDropBehaviorFromBase = function(){
				if (module.container.is(&#x27;.ui-droppable&#x27;)){
					module.container.droppable(&#x27;destroy&#x27;);
					module.container.removeClass(&#x27;node&#x27;);

				}

			};
			// var handleDrop = function(obj) {
			// console.log(&quot;[ &quot; + module.name + &quot; ] handle drop. data: &quot;
			// + JSON.stringify(obj));
			// }
			var templateToTree = function(template) {
				// TODO: check template structure
				return template;
			};
			/**
			 * repaints scenegraph and publishes the updated scenegraph tree
			 *
			 * @publish CHANNEL_SCENEGRAPH_UPDATE object object =
			 *          {sceneGraph : tree}
			 */
			 var refresh = function() {

				// repaint scenegraph
				repaintSceneGraph();
				attachClickListener();
				attachDropHandler();
				// publish change
				module.publish(Config.CHANNEL_SCENEGRAPH_UPDATE, {
					template : {
						sceneGraph: tree,
						name		: treeName,
						description	: treeDescription
					}
				});

				module.publish(Config.CHANNEL_RENDER_TEMPLATE, {
					template:{
						name : treeName,
						description: treeDescription,
						sceneGraph: tree
					}
				});


				module.container.unbind(&#x27;click&#x27;);
			};
			/**
			* call refresh after reset!
			*/
			var reset = function() {
				tree = false;
				treeName = &#x27;&#x27;;
				treeDescription = &#x27;&#x27;;
				$(&#x27;#&#x27;+module.container.attr(&#x27;id&#x27;)).find(&#x27;h2&#x27;).html(&#x27;SceneGraph &#x27;);
				// add drop behavior to &quot;root&quot; element (== module base container)
				module.container.addClass(&#x27;node&#x27;);
				module.publish(Config.CHANNEL_SCENEGRAPH_CONTEXT, {
					context: false
				});
				module.publish(Config.CHANNEL_SCENEGRAPH_UPDATE, {
					template : {
						sceneGraph: false,
						name		: treeName,
						description	: treeDescription
					}
				});
			};
			/** ************************************* * */
			/** TREE HANDLING * */

			var getTreeElem = function(treeNode) {

				if (treeNode === undefined || treeNode === null || treeNode === false) return false;
				//console.log(&quot;tree id &quot; + treeNode.id);
				/** ************************************ */
				/** add template * */
				_.templateSettings.variable = &#x27;rc&#x27;;
				var template = _.template($(&#x27;script.treeNodeContainer&#x27;).html());

				var templateData = {
					id: treeNode.id,
					name: treeNode.name,
					icon: plugins[treeNode.name].icon,
					alt: treeNode.name
				};
				var t = $(template(templateData)); /** ************************************ */
				return $(&#x27;&lt;li/&gt;&#x27;).attr(&#x27;id&#x27;, treeNode.id).html(t).append(&#x27;&lt;ul&gt;&lt;/ul&gt;&#x27;);
			};
			var addChildToTreeElem = function(elem, child) {
				//console.log(&quot;add &quot; + child.html() + &quot; to &quot; + elem.html());
				elem.find(&#x27;ul&#x27;).first().append(child);
			};

			var treeToHtml = function(treeNode, html) {
				if (treeNode === undefined || treeNode === null || treeNode === false) return false;
				var s = html;
				if (s === undefined) s = $(&#x27;&lt;ul/&gt;&#x27;, {
					id: &#x27;sceneGraph-tree&#x27;,
					style: &#x27;display:none&#x27;
				});
					var nodesTodo = [];
					var htmlTodo = [];
					var currentNode = treeNode;
					var currentHtml = getTreeElem(treeNode);
					s.append(currentHtml);
					while (currentNode !== undefined) {
						$.each(currentNode.childs, function(index, child) {
							var c = getTreeElem(child);
							addChildToTreeElem(currentHtml, c);
							nodesTodo.push(child);
							htmlTodo.push(c);
						});
						currentNode = nodesTodo.pop();
						currentHtml = htmlTodo.pop();
					}
					return s;
				};
				var treeWalker = (function() {
					var getNode = function(node, id) {
					//console.log(&quot;getNode: &quot;+node.id+&quot; = &quot;+id+&quot;?&quot;);
					var result = false;
					if (node.id == id) {
						result = node;
					} else {
						for (var i = 0; i &lt; node.childs.length; ++i) {
							result = getNode(node.childs[i], id);
							if (result !== false) {
								break;
							}
						}
					}
					return result;
				};

				var getParent = function(node, id) {
					//console.log(&quot;getNode: &quot;+node.id+&quot; = &quot;+id+&quot;?&quot;);
					var currentNode = node;
					var currentChilds = node.childs;
					var todo = [];
					while (true) {
						for (var i = 0; i &lt; currentChilds.length; ++i) {
							if (id == currentChilds[i].id) {
								return currentNode;
							}
							todo.push(currentChilds[i]);
						}
						if (todo.length === 0) break;
						currentNode = todo.pop();
						currentChilds = currentNode.childs;
					}
					return false;
				};
				var removeChild = function(node, id) {
					// console.log(&quot;remove child &quot; + id + &quot; from &quot; + node.name);
					var result = false;
					for (var i = node.childs.length - 1; i &gt;= 0; --i) {
						if (id == node.childs[i].id) {
							node.childs.splice(i, 1);
							result = true;
							break;
						}
					}
				};
				return {
					getNodeById: function(id) {
						if (tree === null) return false;
						return getNode(tree, id);
					},
					removeNodeById: function(id) {
						if (tree === null){
							module.publish(Config.CHANNEL_ERROR,&#x27;[SceneGraph] Tree is null. Something odd happened.&#x27;);
							return false;
						}
					// element to delete is root.
					// reset!
					if (tree.id == id) {
						reset();
						return true;
					}
					var node = getParent(tree, id);
					if (node === false) return false;
					return removeChild(node, id);
				}
			};
		})();
		/** ************************************* * */
		var repaintSceneGraph = function() {
			// console.log(&quot;repaintSceneGraph &quot; + module.container.attr(&#x27;id&#x27;));
			/* ************************************ */
			/* empty container */
			$(&#x27;#&#x27; + module.container.attr(&#x27;id&#x27;) + &#x27; &gt; #sceneGraph&#x27;).html(&#x27;&#x27;);
			/* ************************************ */
			/* build orgChart tree structure */
			var treeContainer = $(&#x27;#&#x27; + module.container.attr(&#x27;id&#x27;) + &#x27; &gt; #sceneGraph-data&#x27;);
			treeContainer.html(treeToHtml(tree));
			/* ************************************ */
			/* init tree */
			$(&#x27; #sceneGraph-tree&#x27;).jOrgChart({
				chartElement: &#x27;#&#x27; + module.container.attr(&#x27;id&#x27;) + &#x27; &gt; #sceneGraph&#x27;,
				dragAndDrop: false
			});
		};
		var attachClickListener = function() {
				// console.log(&quot;attachClickListener&quot;);
				// remove old listeners
				$(&#x27;div.node&#x27;).unbind(&#x27;click&#x27;);
				$(&#x27;div.node&#x27;).bind(&#x27;click&#x27;, function handleClickEvent(event) {
					var id = $(this).find(&#x27;.treeNode&#x27;).attr(&#x27;id&#x27;);
					var node = treeWalker.getNodeById(id);
					if (node) {
						event.stopPropagation();
						openDialog(node);
					} else {
						// THROW ERROR
						console.log(&#x27;unable to open dialog. node not found.&#x27;);
						module.publish(Config.CHANNEL_ERROR,&#x27;[SceneGraph] Unable to open dialog. node not found.&#x27;);
					}

					//console.log(JSON.stringify(node));
				});
			};
			var attachDropHandler = function() {
				// console.log(&quot;attachDropHandler&quot;);
				//if ($(&quot;.node&quot;).is(&#x27;.ui-droppable&#x27;) == true) $(&quot;.node&quot;).droppable(&#x27;destroy&#x27;);
				// remove drop behavior from nodes
				$(&#x27;.node&#x27;).droppable({
					greedy: true,
					hoverClass: &#x27;ui-state-active&#x27;,
					zIndex: 1000,
					drop: function(event, ui) {
						var newNodeId = ui.draggable.attr(&#x27;id&#x27;);
						var newNodeName = newNodeId.split(&#x27;-&#x27;)[2];
						// console.log(newNodeId + &quot; &quot; + newNodeName);
						var parentId = $(this).find(&#x27;.treeNode&#x27;).attr(&#x27;id&#x27;);
						if(parentId === undefined){
							//dorp on base container?
							if($(this).attr(&#x27;id&#x27;) == module.container.attr(&#x27;id&#x27;)){
								// drop on base container
								// remove drop behavior from base container
								removeDropBehaviorFromBase();
								// add new node ass root node
								tree = new Tree(newNodeName);

								// refresh
								refresh();
								updateContext();
							}else{
								// THROW ERROR
								module.publish(Config.CHANNEL_ERROR,
									&#x27;[SceneGraph] Drop on base container but no root id found.&#x27;);
							}
						}else{
							var parentNode = treeWalker.getNodeById(parentId);
							// check if new node type is in the successor list of the parent node
							if (_.intersection(plugins[parentNode.name].accepts.successors, [plugins[newNodeName].type]).length &gt; 0) {
								parentNode.childs.push(new Tree(newNodeName));
								refresh();
							} else {
							// THROW EXCEPTION / PUBLISH ERROR
							module.publish(Config.CHANNEL_INFO,&#x27;&lt;i&gt;&#x27;+newNodeName+&#x27;&lt;/i&gt; is NOT a successor of target node.&#x27;);
						}
					}
				}
			});

};
/** ************************************* * */
var respondFileshandle = function(obj){
	// console.log(&#x27;[ sceneGraph ][ handle incoming files ]&#x27;);
	files = obj;
};
var respondPluginhandle = function(obj) {
	if (obj.target != _name) return;

	// console.log(&#x27;[ sceneGraph ][ handle incoming plugins ]&#x27;);
	plugins = obj.plugins;

};
var getConfigCallback = function() {
	// console.log(&quot;get set ConfigCallback( &quot; + node.name + &quot;, &quot; + containerId + &quot; ) is not implemented by current plugin!&quot;);
	throw new Error(&#x27;[sceneGraph][getConfigCallback] Empty Callback skeleton called!&#x27;);
};
var updateConfig = function(treeNode, containerId) {
	var config = getConfigCallback(containerId);
	config = config || {};
	treeNode.config = config;
	var obj = {
		template : {
			sceneGraph: tree,
			name		: treeName,
			description	: treeDescription
		}

	};
	module.publish(Config.CHANNEL_SCENEGRAPH_UPDATE, obj);
	module.publish(Config.CHANNEL_RENDER_TEMPLATE, obj);

};
var openDialog = function(treeNode) {

	var containerId = &#x27;dialog-&#x27; + treeNode.name + &#x27;-&#x27; + treeNode.id;


	if (_.indexOf(loadedTemplates, treeNode.name) == -1) {
		/*inject templates to DOM from plugin*/
		module.publish(
			Config.CHANNEL_INJECT_SCRIPTTEMPLATE, {
				url: plugins[treeNode.name].templates
			});

		/*mark template as loaded*/
		loadedTemplates.push(treeNode.name);
	}
	if (typeof plugins[treeNode.name].getConfigCallback === &#x27;function&#x27; &amp;&amp; typeof plugins[treeNode.name].setConfigCallback === &#x27;function&#x27;) {

		getConfigCallback = plugins[treeNode.name].getConfigCallback;
	}

	_.templateSettings.variable = &#x27;rc&#x27;;
	/** ************************************** */
	var pluginTemplate = function(){return &#x27;&#x27;;};
	/** LOAD TEMPLATE - PLUGIN FORM * */
	if (plugins[treeNode.name].templates !== undefined) {

		pluginTemplate = _.template($(&#x27;script.pluginConfigForm#&#x27; + treeNode.name).html());
	}
	/** ************************************** */
	/** LOAD TEMPLATE - MODAL DIALOG * */
	var template = _.template($(&#x27;script.modalDialogContainer&#x27;).html());

	/*get template code*/
	var templateData = {
		id: containerId,
		name: treeNode.name,
		content: pluginTemplate()
	};
	/** ************************************** */
	/*if there is an old dialog container, remove it.*/
	if ($(&#x27;#&#x27; + containerId).length &gt; 0) {
		$(&#x27;#&#x27; + containerId).remove();
	}

	$(&#x27;body&#x27;).append(template(templateData));

	/*set configuration*/
	if (typeof plugins[treeNode.name].setConfigCallback === &#x27;function&#x27;) {
		plugins[treeNode.name].setConfigCallback(
			treeNode.config, containerId,files);
	}

	$(&#x27;#&#x27; + containerId).dialog({
		bgiframe: true,
		autoOpen: false,
		width: 400,
		minHeight: 400,
		height: $(window).height() * 5/6,
		maxHeight: $(window).height(),
		modal: true,
		buttons: {
			Save: function() {
				updateConfig(treeNode, containerId);
				$(this).dialog(&#x27;close&#x27;);
				$(this).remove();

			},
			&#x27;Delete Node&#x27;: function() {
				treeWalker.removeNodeById(treeNode.id);
				refresh();
				$(this).dialog(&#x27;close&#x27;);
				$(this).remove();
			},
			Cancel: function() {
				$(this).dialog(&#x27;close&#x27;);
				$(this).remove();
			}
		},
		show: {
			effect: &#x27;size&#x27;,
			duration: 500
		},
		hide: {
			effect: &#x27;size&#x27;,
			duration: 500
		}
	});

	$(&#x27;#&#x27; + containerId).dialog(&#x27;open&#x27;);
};



/* facade */
return {
	/**
	Module name
	@public
	@property name
	@type {String}
	**/
	name: _name,
	/**
	@public
	@method init
	**/
	init: _init

};
})();

return module;
});

    </pre>
</div>

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script src="../assets/vendor/prettify/prettify-min.js"></script>
<script>prettyPrint();</script>
<script src="../assets/js/yui-prettify.js"></script>
<script src="../assets/../api.js"></script>
<script src="../assets/js/api-filter.js"></script>
<script src="../assets/js/api-list.js"></script>
<script src="../assets/js/api-search.js"></script>
<script src="../assets/js/apidocs.js"></script>
</body>
</html>
