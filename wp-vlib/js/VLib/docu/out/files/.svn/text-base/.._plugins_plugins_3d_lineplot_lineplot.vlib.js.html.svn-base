<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>../plugins/plugins_3d/lineplot/lineplot.vlib.js</title>
    <link rel="stylesheet" href="http://yui.yahooapis.com/3.9.1/build/cssgrids/cssgrids-min.css">
    <link rel="stylesheet" href="../assets/vendor/prettify/prettify-min.css">
    <link rel="stylesheet" href="../assets/css/main.css" id="site_styles">
    <link rel="shortcut icon" type="image/png" href="../assets/favicon.png">
    <script src="http://yui.yahooapis.com/combo?3.9.1/build/yui/yui-min.js"></script>
</head>
<body class="yui3-skin-sam">

<div id="doc">
    <div id="hd" class="yui3-g header">
        <div class="yui3-u-3-4">
            
                <h1><img src="../assets/css/logo.png" title=""></h1>
            
        </div>
        <div class="yui3-u-1-4 version">
            <em>API Docs for: </em>
        </div>
    </div>
    <div id="bd" class="yui3-g">

        <div class="yui3-u-1-4">
            <div id="docs-sidebar" class="sidebar apidocs">
                <div id="api-list">
    <h2 class="off-left">APIs</h2>
    <div id="api-tabview" class="tabview">
        <ul class="tabs">
            <li><a href="#api-classes">Classes</a></li>
            <li><a href="#api-modules">Modules</a></li>
        </ul>

        <div id="api-tabview-filter">
            <input type="search" id="api-filter" placeholder="Type to filter APIs">
        </div>

        <div id="api-tabview-panel">
            <ul id="api-classes" class="apis classes">
            
                <li><a href="../classes/AbstractPlugin.html">AbstractPlugin</a></li>
            
                <li><a href="../classes/Config.html">Config</a></li>
            
                <li><a href="../classes/Controls.html">Controls</a></li>
            
                <li><a href="../classes/Plot.html">Plot</a></li>
            
                <li><a href="../classes/Plugin 3D.html">Plugin 3D</a></li>
            
                <li><a href="../classes/Plugin Axes.html">Plugin Axes</a></li>
            
                <li><a href="../classes/Plugin BasicMaterial.html">Plugin BasicMaterial</a></li>
            
                <li><a href="../classes/Plugin CameraControl.html">Plugin CameraControl</a></li>
            
                <li><a href="../classes/Plugin Color.html">Plugin Color</a></li>
            
                <li><a href="../classes/Plugin Dataset.html">Plugin Dataset</a></li>
            
                <li><a href="../classes/Plugin File.html">Plugin File</a></li>
            
                <li><a href="../classes/Plugin Function.html">Plugin Function</a></li>
            
                <li><a href="../classes/Plugin Heatmap.html">Plugin Heatmap</a></li>
            
                <li><a href="../classes/Plugin Light.html">Plugin Light</a></li>
            
                <li><a href="../classes/Plugin LinePlot.html">Plugin LinePlot</a></li>
            
                <li><a href="../classes/Plugin Plane.html">Plugin Plane</a></li>
            
                <li><a href="../classes/Plugin ScatterPlot.html">Plugin ScatterPlot</a></li>
            
                <li><a href="../classes/Plugin SurfacePlot.html">Plugin SurfacePlot</a></li>
            
                <li><a href="../classes/Plugin WireframeMaterial.html">Plugin WireframeMaterial</a></li>
            
                <li><a href="../classes/SceneGraph.html">SceneGraph</a></li>
            
                <li><a href="../classes/Templates.html">Templates</a></li>
            
                <li><a href="../classes/Toolbox.html">Toolbox</a></li>
            
                <li><a href="../classes/UTILS.html">UTILS</a></li>
            
                <li><a href="../classes/VLib.html">VLib</a></li>
            
                <li><a href="../classes/VMediator.html">VMediator</a></li>
            
            </ul>

            <ul id="api-modules" class="apis modules">
            
                <li><a href="../modules/Controls.html">Controls</a></li>
            
                <li><a href="../modules/main.html">main</a></li>
            
                <li><a href="../modules/Plot.html">Plot</a></li>
            
                <li><a href="../modules/SceneGraph.html">SceneGraph</a></li>
            
                <li><a href="../modules/Templates.html">Templates</a></li>
            
                <li><a href="../modules/Toolbox.html">Toolbox</a></li>
            
                <li><a href="../modules/VLib.html">VLib</a></li>
            
            </ul>
        </div>
    </div>
</div>

            </div>
        </div>
        <div class="yui3-u-3-4">
                <div id="api-options">
        Show:
        <label for="api-show-inherited">
            <input type="checkbox" id="api-show-inherited" checked>
            Inherited
        </label>

        <label for="api-show-protected">
            <input type="checkbox" id="api-show-protected">
            Protected
        </label>

        <label for="api-show-private">
            <input type="checkbox" id="api-show-private">
            Private
        </label>
        <label for="api-show-deprecated">
            <input type="checkbox" id="api-show-deprecated">
            Deprecated
        </label>

    </div>


            <div class="apidocs">
                <div id="docs-main">
                    <div class="content">
                        <h1 class="file-heading">File: ../plugins/plugins_3d/lineplot/lineplot.vlib.js</h1>

<div class="file">
    <pre class="code prettyprint linenums">
define(
	[ &#x27;require&#x27;, &#x27;config&#x27;, &#x27;core/utils.vlib&#x27;, &#x27;three&#x27; ],
	function(require, Config, UTILS, THREE) {
		/**
		TODO&lt;br /&gt;
		@class Plugin LinePlot
		@constructor
		@extends AbstractPlugin
		**/
		var plugin = (function(state) {

			/** ********************************** */
			/** PRIVATE VARIABLES * */
			/** ********************************** */
			var particleSizeDefault = 10;
			var opacityDefault = 1;
			var blendingDefault = false;
			var colorsDefault = true;
			var transparentDefault = false;
				var ambientDefault = &#x27;#ff0000&#x27;; // red
				var xScaleDefault = 400;
				var yScaleDefault = 400;
				var zScaleDefault = 400;


				var x_SCALE_MAX = 400;
				var x_SCALE_MIN = 0;
				var y_SCALE_MAX = 400;
				var y_SCALE_MIN = 0;
				var z_SCALE_MAX = 400;
				var z_SCALE_MIN = 0;
				if(state !== undefined){
					/*x_MAX = state.x_MAX;
					x_MIN = state.x_MIN;
					y_MAX = state.y_MAX;
					y_MIN = state.y_MIN;
					z_MAX = state.z_MAX;
					z_MIN = state.z_MIN;
					x_SCALE_MAX = state.x_SCALE_MAX;
					x_SCALE_MIN = state.x_SCALE_MIN;
					y_SCALE_MAX = state.y_SCALE_MAX;
					z_SCALE_MAX = state.z_SCALE_MAX;
					z_SCALE_MIN = state.z_SCALE_MIN;*/
				}
				/** ********************************** */
				/** PUBLIC VARIABLES * */
				/** ********************************** */
				this.context = Config.PLUGINTYPE.CONTEXT_3D;
				this.type = Config.PLUGINTYPE.PLOT;
				this.name = &#x27;lineplot&#x27;;
				this.accepts = {
					predecessors : [ Config.PLUGINTYPE.CONTEXT_3D ],
					successors : [ Config.PLUGINTYPE.DATA,
					Config.PLUGINTYPE.AXES ]
				}
				/** path to plugin-template file * */
				this.templates = Config.absPlugins
				+ &#x27;/plugins_3d/lineplot/templates.js&#x27;;
				this.icon = Config.absPlugins
				+ &#x27;/plugins_3d/lineplot/icon.png&#x27;;
				this.description = &#x27;Requires: [ &#x27;+this.accepts.predecessors.join(&#x27;, &#x27;)+&#x27; ] Accepts: [ &#x27;+this.accepts.successors.join(&#x27;, &#x27;)+&#x27; ]&#x27;;
				/** ********************************** */
				/** PUBLIC METHODS * */
				/** ********************************** */
				/**
				 * Takes inserted configuration from the plugin-template and
				 * returns the parameters as JSON-config-file
				 *
				 * @param containerId
				 *            parent container where the plugin-template got
				 *            added
				 *
				 * @return config file format:
				 *         {camera:{x:VALUE,y:VALUE,z:VALUE}}
				 */
				 this.deepCopy = function(){
				 	var privates = {
				 		/*x_MAX : x_MAX,
				 		x_MIN : x_MIN,
				 		y_MAX : y_MAX,
				 		y_MAX : y_MAX,
				 		y_MIN : y_MIN,
				 		z_MAX : z_MAX,
				 		z_MIN : z_MIN,
				 		x_SCALE_MAX : x_SCALE_MAX,
				 		x_SCALE_MIN : x_SCALE_MIN,
				 		y_SCALE_MAX : y_SCALE_MAX,
				 		y_SCALE_MIN : y_SCALE_MIN,
				 		z_SCALE_MAX : z_SCALE_MAX,
				 		z_SCALE_MIN : z_SCALE_MIN*/

				 	}
				 	return new plugin(privates);
				 }
				 this.getConfigCallback = function(containerId) {

				 	var lineWidth = $(&#x27;#&#x27; + containerId + &#x27; #lineWidth&#x27;)
				 	.val();
				 	var opacity = $(&#x27;#&#x27; + containerId + &#x27; #opacity&#x27;).val();

				 	if(lineWidth === undefined || lineWidth ==&quot;&quot;){
				 		lineWidth = 3;
				 	}
				 	if(opacity === undefined || opacity ==&quot;&quot;){
				 		lineWidth = 1;
				 	}


				 	var xScale = $(&#x27;#&#x27; + containerId + &#x27; #xScale&#x27;).val();

				 	var yScale = $(&#x27;#&#x27; + containerId + &#x27; #yScale&#x27;).val();

				 	var zScale = $(&#x27;#&#x27; + containerId + &#x27; #zScale&#x27;).val();

				 	var result = {
				 		lineWidth: lineWidth,
				 		opacity: opacity,
				 		scale : {
				 			&#x27;x&#x27; : xScale === &quot;&quot; ? xScaleDefault : xScale,
				 			&#x27;y&#x27; : yScale === &quot;&quot; ? yScaleDefault : yScale,
				 			&#x27;z&#x27; : zScale === &quot;&quot; ? zScaleDefault : zScale

				 		}

				 	};
				 	return result;

				 }
				/**
				 * Takes arguments from config and inserts them to the
				 * plugin-template
				 *
				 * @param config
				 *            plugin config file
				 * @param containerId
				 *            parent container where the plugin-template got
				 *            added
				 */
				 this.setConfigCallback = function(config, containerId) {
				 	console.log(&quot;[ line ][setConfig] &quot;);
				 	if (config == &quot;&quot; || config === undefined) {
				 		config = {
				 			linewidth : &#x27;&#x27;,
				 			scale : &#x27;&#x27;
				 		};
				 	}

				 	if (config.lineWidth != undefined) {
				 		$(&#x27;#&#x27; + containerId + &#x27; #lineWidth&#x27;).val(
				 			config.lineWidth);
				 	} else {
				 		$(&#x27;#&#x27; + containerId + &#x27; #lineWidth&#x27;).val(
				 			3);
				 		config.lineWidth = 3;
				 	}
				 	if (config.opacity != undefined) {
				 		$(&#x27;#&#x27; + containerId + &#x27; #opacity&#x27;).val(
				 			config.opacity);
				 	} else {
				 		$(&#x27;#&#x27; + containerId + &#x27; #opacity&#x27;).val(opacityDefault);
				 		config.opacity = 1;
				 	}

				 	if (config.scale.x != undefined) {
				 		$(&#x27;#&#x27; + containerId + &#x27; #xScale&#x27;).val(config.scale.x);
				 	} else {
				 		$(&#x27;#&#x27; + containerId + &#x27; #xScale&#x27;).val(xScaleDefault);
				 	}
				 	if (config.scale.y != undefined) {
				 		$(&#x27;#&#x27; + containerId + &#x27; #yScale&#x27;).val(config.scale.y);
				 	} else {
				 		$(&#x27;#&#x27; + containerId + &#x27; #yScale&#x27;).val(yScaleDefault);
				 	}
				 	if (config.scale.z != undefined) {
				 		$(&#x27;#&#x27; + containerId + &#x27; #zScale&#x27;).val(config.scale.z);
				 	} else {
				 		$(&#x27;#&#x27; + containerId + &#x27; #zScale&#x27;).val(zScaleDefault);
				 	}

					// particleSizeSlider
					$(&#x27;#&#x27; + containerId ).find(&#x27; #lineWidthSlider&#x27;).slider({
						orientation: &quot;horizontal&quot;,
						range: &quot;min&quot;,
						min: 1,
						max: 200,
						value: config.lineWidth,
						slide: function (event, ui) {
							$(&#x27;#&#x27; + containerId + &#x27; #lineWidth&#x27;).val(ui.value);
						}
					});
					// opacitySlider
					$(&#x27;#&#x27; + containerId ).find(&#x27; #opacitySlider&#x27;).slider({
						orientation: &quot;horizontal&quot;,
						range: &quot;min&quot;,
						min: 0,
						max: 100,
						value: config.opacity*100,
						slide: function (event, ui) {
							$(&#x27;#&#x27; + containerId + &#x27; #opacity&#x27;).val(ui.value/100);
						}
					});

				}


				this.exec = function(config, childs) {
					console.log(&quot;[ lineplot ] \t\t EXEC&quot;);
					var result = [];
					if (config === &#x27;&#x27;) {
						config = {};
					}
					if (!config.hasOwnProperty(&#x27;lineWidth&#x27;))
						config.lineWidth = 3;
					if (!config.hasOwnProperty(&#x27;opacity&#x27;))
						config.opacity = 1;

					// set scaling
					if (config.hasOwnProperty(&#x27;scale&#x27;)) {
						x_SCALE_MAX = config.scale.x;
						y_SCALE_MAX = config.scale.y;
						z_SCALE_MAX = config.scale.z;
					}
					if(childs == null || childs === undefined || childs.length == 0){
						return;
					}
					var borders = {
						xMax : &#x27;auto&#x27;,
						yMax : &#x27;auto&#x27;,
						zMax : &#x27;auto&#x27;,
						xMin : &#x27;auto&#x27;,
						yMin : &#x27;auto&#x27;,
						zMin : &#x27;auto&#x27;
					}

					/** *********************************** * */
					/** HANDLE SUCCESSOR PLUGINGS * */
					/** *********************************** * */
					var data = [];
					var colors = [];
					var heatmaps = [];
					// each dataset will be represented as a line
					var datasets = [];
					var axesSet = false;
					var axesCallback;
					var axesContext;
					var child = undefined;
					for ( var i = 0; i &lt; childs.length; ++i) {
						child = childs[i];
						if(child !== undefined &amp;&amp; child.pType !== undefined){
							if($.inArray(child.pType, this.accepts.successors) != -1){
								switch(child.pType){
									case Config.PLUGINTYPE.DATA:
									var tmpData = child.response.data;
									var tmpColor = child.response.colorArray
									datasets.push(child.response);
									if(child.response.heatmap !== undefined){
										heatmaps.push(child.response.heatmap);
									}
									data = data.concat(tmpData);
									colors = colors.concat(tmpColor);

									break;
									case Config.PLUGINTYPE.AXES:
									var callback = child.response.callback;
									var context = child.response.context;
									borders.xMax = child.response.rangeX;
									borders.yMax = child.response.rangeY;
									borders.zMax = child.response.rangeZ;
									axesSet = true;
									break;
								}
							}
						}else{
							console.log(&quot;pType of child plugin not set!&quot;);
						}
					}

					if(data.length == 0) return;

					/** *********************************** */
					/** GET MAX VALUES * */
					/** CHECK RANGE - auto * */

					var minMax = getMinMax(data,borders);
					borders.xMax = borders.xMax  != &#x27;auto&#x27; ? borders.xMax : minMax.xMax;
					borders.yMax = borders.yMax  != &#x27;auto&#x27; ? borders.yMax : minMax.yMax;
					borders.zMax = borders.zMax  != &#x27;auto&#x27; ? borders.zMax : minMax.zMax;
					borders.xMin = borders.xMin  != &#x27;auto&#x27; ? borders.xMin : minMax.xMin;
					borders.yMin = borders.yMin  != &#x27;auto&#x27; ? borders.yMin : minMax.yMin;
					borders.zMin = borders.zMin  != &#x27;auto&#x27; ? borders.zMin : minMax.zMin;

					var data_all_scaled = scale(data,borders);

					var material = new THREE.SpriteMaterial( {
						color: 0xff0000,
						program: function ( context ) {
							context.beginPath();
							context.arc( 0, 0, 0.5, 0, PI2, true );
							context.fill();
						}
					} );

					var minMax = UTILS.C3D.getMinMax(data);
					borders.xMax = borders.xMax  != &#x27;auto&#x27; ? borders.xMax : minMax.xMax;
					borders.yMax = borders.yMax  != &#x27;auto&#x27; ? borders.yMax : minMax.yMax;
					borders.zMax = borders.zMax  != &#x27;auto&#x27; ? borders.zMax : minMax.zMax;
					borders.xMin = borders.xMin  != &#x27;auto&#x27; ? borders.xMin : minMax.xMin;
					borders.yMin = borders.yMin  != &#x27;auto&#x27; ? borders.yMin : minMax.yMin;
					borders.zMin = borders.zMin  != &#x27;auto&#x27; ? borders.zMin : minMax.zMin;
					/** *********************************** */
					/** handle data * */
					var threeColors = [];
					var scaled_dataset, geometry, line, particle,threeColors;

					/** *********************************** */
					/** for each dataset create a line  * */
					for(var index = 0; index &lt; datasets.length;index++){
						// scale to plot dimension

						scaled_dataset = scale(datasets[index].data,borders);

						geometry = new THREE.Geometry();
						threeColors = [];
						/** create particles from current dataset * */
						for ( var i = 0; i &lt; scaled_dataset.length; i++) {

							particle = new THREE.Sprite( material );
							particle.position.x = scaled_dataset[ i ].x;
							particle.position.y = scaled_dataset[ i ].y;
							particle.position.z = scaled_dataset[ i ].z;
							// add node color
							threeColors.push(new THREE.Color(&#x27;#&#x27;
								+ datasets[index].colorArray[i]));
							//result.push( particle );
							geometry.vertices.push( particle.position );
						}
						geometry.colors = threeColors;
						geometry.mergeVertices();

						/** create a line from particles * */
						line = new THREE.Line( geometry,
							new THREE.LineBasicMaterial( {
								color: 0xffffff,
								opacity: config.opacity,
								linewidth: config.lineWidth,
								vertexColors: THREE.VertexColors
							} )
							);

						/**  push line to result array * */
						result.push(line);
						scaled_dataset = [];
					}
					/** *********************************** */
					/** handle axes * */
					if (axesSet) {
						var axes = callback.apply(context, [ data, data_all_scaled,colors,
							x_SCALE_MAX, y_SCALE_MAX, z_SCALE_MAX, borders, minMax, heatmaps ]);
						for ( var index = 0; index &lt; axes.length; ++index) {
							// add axes to scene
							result.push(axes[index]);
						}
					}
					/** *********************************** */
					/** handle config &amp;&amp; plot * */
					// set color array

					return {
						pType : this.type,
						response : result
					};

				}

				/** ********************************** */
				/** PRIVATE METHODS * */
				/** ********************************** */
				var scale = function(data,borders) {

					var b2 = {
						&quot;x_MAX&quot;:borders.xMax,
						&quot;y_MAX&quot;:borders.yMax,
						&quot;z_MAX&quot;:borders.zMax,
						&quot;x_MIN&quot;:borders.xMin,
						&quot;y_MIN&quot;:borders.yMin,
						&quot;z_MIN&quot;:borders.zMin,
						&quot;x_SCALE_MIN&quot; : x_SCALE_MIN,
						&quot;y_SCALE_MIN&quot; : y_SCALE_MIN,
						&quot;z_SCALE_MIN&quot; : z_SCALE_MIN,
						&quot;x_SCALE_MAX&quot; : x_SCALE_MAX,
						&quot;y_SCALE_MAX&quot; : y_SCALE_MAX,
						&quot;z_SCALE_MAX&quot; : z_SCALE_MAX,
					};
					return UTILS.C3D.scaleLinearToRange(data,b2);
				}

				var getMinMax = function(data,borders) {


					var tmp_x_max, tmp_y_max, tmp_z_max, tmp_x_min, tmp_y_min, tmp_z_min;
					tmp_x_max = tmp_y_max = tmp_z_max = tmp_x_min = tmp_y_min = tmp_z_min = 0;
					for ( var index = 0; index &lt; data.length; ++index) {

						var x = parseFloat(data[index].x);
						var y = parseFloat(data[index].y);
						var z = parseFloat(data[index].z);
						// x
						if (x &gt;= tmp_x_max &amp;&amp; borders.xMax == &#x27;auto&#x27;) {
							tmp_x_max = x;
						} else if (x &lt; tmp_x_min &amp;&amp; borders.xMin == &#x27;auto&#x27;) {
							tmp_x_min = x;
						}
						// y
						if (y &gt;= tmp_y_max &amp;&amp; borders.yMax == &#x27;auto&#x27;) {
							tmp_y_max = y;
						} else if (y &lt; tmp_y_min &amp;&amp; borders.yMin == &#x27;auto&#x27;) {
							tmp_y_min = y;
						}
						// z
						if (z &gt;= tmp_z_max &amp;&amp; borders.zMax == &#x27;auto&#x27;) {
							tmp_z_max = z;
						} else if (z &lt; tmp_z_min &amp;&amp; borders.zMin == &#x27;auto&#x27;) {
							tmp_z_min = z;
						}
					}
					var result = {};
					if (borders.xMax == &#x27;auto&#x27;){
						result.xMax = tmp_x_max;
					}else {
						result.xMax = borders.xMax;
					}
					if (borders.yMax == &#x27;auto&#x27;){
						result.yMax = tmp_y_max;
					}else {
						result.yMax = borders.yMax;
					}
					if (borders.zMax == &#x27;auto&#x27;){
						result.zMax = tmp_z_max;
					}else {
						result.zMax = borders.zMax;
					}

					if (borders.xMin == &#x27;auto&#x27;){
						result.xMin = tmp_x_min;
					}else {
						result.xMin = borders.xMin;
					}
					if (borders.yMin == &#x27;auto&#x27;){
						result.yMin = tmp_y_min;
					}else {
						result.yMin = borders.yMin;
					}
					if (borders.zMin == &#x27;auto&#x27;){
						result.zMin = tmp_z_min;
					}else {
						result.zMin = borders.zMin;
					}

					return result;

				}

			});

return plugin;

});

    </pre>
</div>

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script src="../assets/vendor/prettify/prettify-min.js"></script>
<script>prettyPrint();</script>
<script src="../assets/js/yui-prettify.js"></script>
<script src="../assets/../api.js"></script>
<script src="../assets/js/api-filter.js"></script>
<script src="../assets/js/api-list.js"></script>
<script src="../assets/js/api-search.js"></script>
<script src="../assets/js/apidocs.js"></script>
</body>
</html>
