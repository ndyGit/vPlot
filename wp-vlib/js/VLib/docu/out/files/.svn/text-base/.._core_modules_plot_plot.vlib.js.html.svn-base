<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>../core/modules/plot/plot.vlib.js</title>
    <link rel="stylesheet" href="http://yui.yahooapis.com/3.9.1/build/cssgrids/cssgrids-min.css">
    <link rel="stylesheet" href="../assets/vendor/prettify/prettify-min.css">
    <link rel="stylesheet" href="../assets/css/main.css" id="site_styles">
    <link rel="shortcut icon" type="image/png" href="../assets/favicon.png">
    <script src="http://yui.yahooapis.com/combo?3.9.1/build/yui/yui-min.js"></script>
</head>
<body class="yui3-skin-sam">

<div id="doc">
    <div id="hd" class="yui3-g header">
        <div class="yui3-u-3-4">
            
                <h1><img src="../assets/css/logo.png" title=""></h1>
            
        </div>
        <div class="yui3-u-1-4 version">
            <em>API Docs for: </em>
        </div>
    </div>
    <div id="bd" class="yui3-g">

        <div class="yui3-u-1-4">
            <div id="docs-sidebar" class="sidebar apidocs">
                <div id="api-list">
    <h2 class="off-left">APIs</h2>
    <div id="api-tabview" class="tabview">
        <ul class="tabs">
            <li><a href="#api-classes">Classes</a></li>
            <li><a href="#api-modules">Modules</a></li>
        </ul>

        <div id="api-tabview-filter">
            <input type="search" id="api-filter" placeholder="Type to filter APIs">
        </div>

        <div id="api-tabview-panel">
            <ul id="api-classes" class="apis classes">
            
                <li><a href="../classes/AbstractPlugin.html">AbstractPlugin</a></li>
            
                <li><a href="../classes/Config.html">Config</a></li>
            
                <li><a href="../classes/Controls.html">Controls</a></li>
            
                <li><a href="../classes/Plot.html">Plot</a></li>
            
                <li><a href="../classes/Plugin 3D.html">Plugin 3D</a></li>
            
                <li><a href="../classes/Plugin Axes.html">Plugin Axes</a></li>
            
                <li><a href="../classes/Plugin BasicMaterial.html">Plugin BasicMaterial</a></li>
            
                <li><a href="../classes/Plugin CameraControl.html">Plugin CameraControl</a></li>
            
                <li><a href="../classes/Plugin Color.html">Plugin Color</a></li>
            
                <li><a href="../classes/Plugin Dataset.html">Plugin Dataset</a></li>
            
                <li><a href="../classes/Plugin File.html">Plugin File</a></li>
            
                <li><a href="../classes/Plugin Function.html">Plugin Function</a></li>
            
                <li><a href="../classes/Plugin Heatmap.html">Plugin Heatmap</a></li>
            
                <li><a href="../classes/Plugin Light.html">Plugin Light</a></li>
            
                <li><a href="../classes/Plugin LinePlot.html">Plugin LinePlot</a></li>
            
                <li><a href="../classes/Plugin Plane.html">Plugin Plane</a></li>
            
                <li><a href="../classes/Plugin ScatterPlot.html">Plugin ScatterPlot</a></li>
            
                <li><a href="../classes/Plugin SurfacePlot.html">Plugin SurfacePlot</a></li>
            
                <li><a href="../classes/Plugin WireframeMaterial.html">Plugin WireframeMaterial</a></li>
            
                <li><a href="../classes/SceneGraph.html">SceneGraph</a></li>
            
                <li><a href="../classes/Templates.html">Templates</a></li>
            
                <li><a href="../classes/Toolbox.html">Toolbox</a></li>
            
                <li><a href="../classes/UTILS.html">UTILS</a></li>
            
                <li><a href="../classes/VLib.html">VLib</a></li>
            
                <li><a href="../classes/VMediator.html">VMediator</a></li>
            
            </ul>

            <ul id="api-modules" class="apis modules">
            
                <li><a href="../modules/Controls.html">Controls</a></li>
            
                <li><a href="../modules/main.html">main</a></li>
            
                <li><a href="../modules/Plot.html">Plot</a></li>
            
                <li><a href="../modules/SceneGraph.html">SceneGraph</a></li>
            
                <li><a href="../modules/Templates.html">Templates</a></li>
            
                <li><a href="../modules/Toolbox.html">Toolbox</a></li>
            
                <li><a href="../modules/VLib.html">VLib</a></li>
            
            </ul>
        </div>
    </div>
</div>

            </div>
        </div>
        <div class="yui3-u-3-4">
                <div id="api-options">
        Show:
        <label for="api-show-inherited">
            <input type="checkbox" id="api-show-inherited" checked>
            Inherited
        </label>

        <label for="api-show-protected">
            <input type="checkbox" id="api-show-protected">
            Protected
        </label>

        <label for="api-show-private">
            <input type="checkbox" id="api-show-private">
            Private
        </label>
        <label for="api-show-deprecated">
            <input type="checkbox" id="api-show-deprecated">
            Deprecated
        </label>

    </div>


            <div class="apidocs">
                <div id="docs-main">
                    <div class="content">
                        <h1 class="file-heading">File: ../core/modules/plot/plot.vlib.js</h1>

<div class="file">
    <pre class="code prettyprint linenums">
define(
	[ &#x27;require&#x27;, &#x27;config&#x27;, &#x27;jquery&#x27;, &#x27;underscore&#x27;,&#x27;libs/canvas2image&#x27;,&#x27;libs/base64&#x27;,&#x27;libs/rgbcolors&#x27;,&#x27;libs/StackBlur&#x27;,&#x27;libs/canvg&#x27; ],
	function(require, Config, $, _) {
		&#x27;use strict&#x27;;
			/**
			TODO&lt;br /&gt;
			@module Plot
			@class Plot
			**/
			var module = function() {
				this.name = &#x27;plot&#x27;;
				this.plugins = null;
				this.container = &#x27;body&#x27;;
				var width;
				var height;
				var baseId;
				var renderId;
				// this.baseContainer;
				// this.plotContainer;
				// this.controlsContainer;
				// this.messageContainer;

				// var fullscreenState = false;
				var renderResult;
				var runningPlugin;
				var animationId;
				var isRendering = false;
				var lastRenderedObj;
				var _templates = Config.absModules + &#x27;/plot/templates.js&#x27;;

				this.isRegisterd = function() {
					return (typeof this.subscribe === &#x27;function&#x27;) &amp;&amp; (typeof this.publish === &#x27;function&#x27;);

				};
				this.init = function(container) {

					this.container = $(container);
					console.log(&#x27;********************plot init container &#x27;+this.container.attr(&#x27;id&#x27;));

					if (this.isRegisterd()) {
						/** *************************************** */
						/* REQUEST TEMPLATE INJECTION */
						/** *************************************** */
						this.publish(Config.CHANNEL_INJECT_SCRIPTTEMPLATE, {
							url: _templates
						});
						/** *************************************** */
						/* CALL FUNCTIONS HERER */
						/** *************************************** */
						this.addGui();
						this.addListener();


						// get plugins from core
						console.log(&#x27;[ plot ][ requesting plugins ]&#x27;);
						this.publish(Config.CHANNEL_REQUEST_PLUGINS, {
							src : this.container
						});

						/** *************************************** */
					} else {
						this.publish(Config.CHANNEL_ERROR,&#x27;Module[ plot ] not registered! Use VLib.registerModule(obj) first.&#x27;);
						throw &#x27;Module [ &#x27;+ this.name+ &#x27; ] not registered! Use VLib.registerModule(obj) first.&#x27;;
					}

				};

				this.addGui = function() {
					this.container.html(&#x27;&#x27;);
					/** add controler template * */
					_.templateSettings.variable = &#x27;rc&#x27;;
					var template = _.template($(&#x27;script.plotContainer&#x27;).html());
					this.container.append(template());
					this.baseContainer = this.container.find(&#x27;#vPlot-BaseContainer&#x27;);
					this.plotContainer = this.container.find(&#x27;#plotContainer&#x27;);
					this.controlsContainer = this.container.find(&#x27;#plotControls&#x27;);
					this.messageContainer = this.container.find(&#x27;#plotMessage&#x27;);

					this.baseContainer.attr(&#x27;id&#x27;,&#x27;vPlot-base-&#x27;+this.container.attr(&#x27;id&#x27;));
					this.plotContainer.attr(&#x27;id&#x27;,&#x27;vPlot-render-&#x27;+this.container.attr(&#x27;id&#x27;));

					if(this.baseContainer.height() &lt; 100){
						this.baseContainer.height(this.container.height());
					}

					if(this.baseContainer.height() &lt; 100){
						this.baseContainer.height(500);
					}
					// height is zero
					if(this.baseContainer.height() &lt; 100){
						this.publish(Config.CHANNEL_ERROR,&#x27;Module[ plot ] Container.height() is ZERO!&#x27;);
					}

					if(this.baseContainer.width() &lt; 100){
						this.baseContainer.width(this.container.width());
					}
					// height is zero
					if(this.baseContainer.width() &lt; 100){
						this.baseContainer.height(this.container.height());
					}
					if(this.baseContainer.width() &lt; 100){
						this.publish(Config.CHANNEL_ERROR,&#x27;Module[ plot ] Container.width() is ZERO!&#x27;);
					}
					width = this.baseContainer.width();
					height = this.baseContainer.height();
					baseId = this.baseContainer.attr(&#x27;id&#x27;);
					renderId = this.plotContainer.attr(&#x27;id&#x27;);
					this.plotContainer.width(width);
					this.plotContainer.height(height);

				};

				this.showMsg = function(type,text){
					var msg = $(&#x27;&lt;div /&gt;&#x27;);
					msg.attr(&#x27;class&#x27;,&#x27;alert alert-dismissable &#x27;+type);
					msg.append(&#x27;&lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;alert&quot; aria-hidden=&quot;true&quot;&gt;&amp;times;&lt;/button&gt;&#x27;);
					msg.append(text);
					this.messageContainer.html(msg);

				};
				this.clearMsg = function(){
					this.messageContainer.html(&#x27;&#x27;);
				};

				/** *************************************** */
				/* LISTENERS */
				/** *************************************** */
				this.attachFocusListener = function(){
					this.container.mouseenter(function(){
						if(isRendering)$(this).find(&#x27;#plotControls&#x27;).fadeIn(&#x27;slow&#x27;);
					}).mouseleave(function(){
						$(this).find(&#x27;#plotControls&#x27;).fadeOut(&#x27;slow&#x27;);
					});
				};
				this.attachRefreshListener = function(){
					var that = this;
					this.controlsContainer.find(&#x27;#plot-refresh&#x27;).click(function(){
						that.refresh();
					});
				};

				this.attachSaveListener = function(){
					var that = this;
					this.controlsContainer.find(&#x27;#plot-save&#x27;).click(function(){
						try{
							//3d - canvas
							Canvas2Image.saveAsPNG(renderResult.domElement);
						}catch(e){
							if(e instanceof TypeError){
								//2d -svg to canvas to png
								that.plotContainer.append(&#x27;&lt;canvas id=&quot;plot-canvas&quot;&gt;&lt;/canvas&gt;&#x27;);
								var canvas = document.createElement(&#x27;canvas&#x27;);
								//svg to canvas
								var svg = that.plotContainer.find(&#x27;svg&#x27;).prop(&#x27;outerHTML&#x27;).trim();

								canvg(canvas,svg);
								//canvas to png
								Canvas2Image.saveAsPNG(canvas);
							}
						}

					});
				};
				var isOpen = false;
				this.attachFullscreenClickListener = function(){

					var target = document.getElementById(this.baseContainer.attr(&#x27;id&#x27;));

					this.controlsContainer.find(&#x27;#plot-fullscreen&#x27;).click(function(){
						if(!isOpen){
							if(lastRenderedObj === undefined) return;

							if(target.requestFullscreen) {
								target.requestFullscreen();
							}else if(target.mozRequestFullScreen) {
								target.mozRequestFullScreen();
							} else if(target.webkitRequestFullscreen) {
								target.webkitRequestFullscreen();
							} else if(target.msRequestFullscreen) {
								target.msRequestFullscreen();
							}

						}else{
							if(document.exitFullscreen) {
								document.exitFullscreen();
							} else if(document.mozCancelFullScreen) {
								document.mozCancelFullScreen();
							} else if(document.webkitExitFullscreen) {
								document.webkitExitFullscreen();
							}
						}
					});
				};

				this.handleFullscreenState = function(fullscreen){

					if(fullscreen){
						this.resizeToFullscreen();
						isOpen = true;
					}else{
						this.resizeToNormal();
						isOpen = false;
					}
					this.refresh();
				};
				this.resizeToFullscreen = function(){

					document.getElementById(renderId).style.width =	$(window).width() + &#x27;px&#x27;;
					document.getElementById(renderId).style.height =	$(window).height() + &#x27;px&#x27;;
					document.getElementById(baseId).style.width =	$(window).width() + &#x27;px&#x27;;
					document.getElementById(baseId).style.height =	$(window).height() + &#x27;px&#x27;;

				};
				this.resizeToNormal = function(){

					document.getElementById(renderId).style.width = width+&#x27;px&#x27;;
					document.getElementById(renderId).style.height = height+&#x27;px&#x27;;
					document.getElementById(baseId).style.width = width+&#x27;px&#x27;;
					document.getElementById(baseId).style.height = height+&#x27;px&#x27;;

				};
				this.attachFullscreenListener = function(){
					var that = this;
					document.addEventListener(&#x27;fullscreenchange&#x27;, function () {
						that.handleFullscreenState(document.fullscreen);
					}, false);

					document.addEventListener(&#x27;mozfullscreenchange&#x27;, function () {
						that.handleFullscreenState(document.mozFullScreen);
					}, false);

					document.addEventListener(&#x27;webkitfullscreenchange&#x27;, function () {
						that.handleFullscreenState(document.webkitIsFullScreen);
					}, false);

					document.addEventListener(&#x27;msfullscreenchange&#x27;, function () {
						that.handleFullscreenState(document.msFullscreenElement);
					}, false);
				};
				this.addListener = function() {

					this.attachFullscreenListener();
					this.attachFullscreenClickListener();
					this.attachFocusListener();
					this.attachRefreshListener();

					this.attachSaveListener();
					/**
					SUBSCRIPTION
					@event Config.CHANNEL_RESPOND_PLUGINS
					*/
					this.subscribe(Config.CHANNEL_RESPOND_PLUGINS,
						this.respondPluginhandle);
					/**
					SUBSCRIPTION
					@event Config.CHANNEL_RENDER_TEMPLATE
					*/
					this.subscribe(Config.CHANNEL_RENDER_TEMPLATE, render);
					/**
					SUBSCRIPTION
					@event Config.CHANNEL_RESET
					*/
					this.subscribe(Config.CHANNEL_RESET, this.reset);
					/**
					SUBSCRIPTION
					@event Config.CHANNEL_REFRESH
					*/
					this.subscribe(Config.CHANNEL_REFRESH, this.refresh);

				};
				this.refresh = function(){
					if(lastRenderedObj === undefined) return;
					this.publish(Config.CHANNEL_RENDER_TEMPLATE, lastRenderedObj);
				};
				this.reset = function(){
					this.showMsg(&#x27;alert-info&#x27;,&#x27;[ plot module ] waiting for update...&#x27;);
					if(runningPlugin !== null &amp;&amp; runningPlugin !== undefined){
						if(runningPlugin.stop === &#x27;function&#x27;)
							runningPlugin.stop();
						lastRenderedObj = undefined;
						this.plotContainer.html(&#x27;&#x27;);
					}


				};
				/* LISTENERS */
				var render = function(obj) {

					if(obj.target !== undefined &amp;&amp; obj.target !== this.container){
						return;
					}
					if(obj.template === undefined || obj.template === false) {
						isRendering = false;
						this.showMsg(&#x27;alert-info&#x27;,&#x27;[ plot module ] waiting for update...&#x27;);
						this.plotContainer.html(&#x27;&#x27;);
						return;
					}

					if(obj.template.sceneGraph === undefined || obj.template.sceneGraph === false){
						isRendering = false;
						this.showMsg(&#x27;alert-info&#x27;,&#x27;[ plot module ] invalid template!&#x27;);
						return;
					}

					this.clearMsg();

					if(runningPlugin !== undefined &amp;&amp; runningPlugin !== null){
						if(runningPlugin.stop === &#x27;function&#x27;){
							runningPlugin.stop();
						}
					}
					lastRenderedObj = _.clone(obj);
					isRendering = true;

					var p = {};
					$.each(this.plugins,function(i,o){
						if(o.type === Config.PLUGINTYPE.CONTEXT_3D){
							p[o.name] = o;
						}else if(typeof o.deepCopy === &#x27;function&#x27;){
							p[o.name] = o.deepCopy();
						}else{
							p[o.name] = jQuery.extend(true, {}, o);
						}
					});

					console.log(&#x27;[ plot ][ repaint ][ &#x27;+this.container.attr(&#x27;id&#x27;)+&#x27; ]&#x27;);

					var root = obj.template.sceneGraph;
					var parsed = this.parse(root);


					if(root.config === &#x27;&#x27; || root.config === undefined){
						root.config = {};
					}
					if( root.config.scene === undefined){
						root.config.scene = {};
					}
					//root.config.container = this.plotContainer === undefined ? this.container : this.plotContainer;
					root.config.container = this.plotContainer.attr(&#x27;id&#x27;);

					if(root.config.scene.height === 0){
						this.publish(Config.CHANNEL_WARNING,&#x27;Scene height is 0! Height will be set to DEFAULT.&#x27;);
						console.log(&#x27;[ plot ] Warning: container.height is 0! Height will be set to DEFAULT_PLOT_HEIGHT= &#x27;+Config.DEFAULT_PLOT_HEIGHT);
						root.config.scene.height = Config.DEFAULT_PLOT_HEIGHT;
					}
					if(root.config.scene.width === 0){
						this.publish(Config.CHANNEL_WARNING,&#x27;Scene width is 0! Width will be set to DEFAULT.&#x27;);
						console.log(&#x27;[ plot ] Warning: container.width is 0! Width will be set to DEFAULT_PLOT_WIDTH= &#x27;+Config.DEFAULT_PLOT_WIDTH);
						root.config.scene.width = Config.DEFAULT_PLOT_WIDTH;
					}

					runningPlugin = this.plugins[root.name];
					renderResult = runningPlugin.exec(root.config,parsed);

					if(renderResult.animationId !== undefined){
						animationId = renderResult.animationId;
					}
					if(renderResult !== true) this.plotContainer.html(renderResult.domElement);
					this.container.find(&#x27;#plotDescriptionContainer&#x27;).html(obj.template.description);
					this.plugins = p;

				};

				this.parse = function(treeElement) {

					var result = [];

					for ( var i = 0; i &lt; treeElement.childs.length; ++i) {

						var tmp = this.parse(treeElement.childs[i]);
						var clone = _.clone(this.plugins[treeElement.childs[i].name]);
						console.log(&#x27;parse &#x27; + clone.name);
						result.push(clone.exec(treeElement.childs[i].config, tmp));
					}
					return result;

				};
				this.respondPluginhandle = function(obj) {
					if (obj.target != this.container)
						return;
					this.plugins = obj.plugins;
				};
			};

			return module;
		});

    </pre>
</div>

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script src="../assets/vendor/prettify/prettify-min.js"></script>
<script>prettyPrint();</script>
<script src="../assets/js/yui-prettify.js"></script>
<script src="../assets/../api.js"></script>
<script src="../assets/js/api-filter.js"></script>
<script src="../assets/js/api-list.js"></script>
<script src="../assets/js/api-search.js"></script>
<script src="../assets/js/apidocs.js"></script>
</body>
</html>
